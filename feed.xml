<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="ravialdy/ravialdy.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="ravialdy/ravialdy.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2023-11-10T05:25:11+00:00</updated><id>ravialdy/ravialdy.github.io/feed.xml</id><title type="html">Ravialdy’s Blog</title><subtitle>Experienced AI Researcher and Data Scientist with over 3 years of experience in computer vision, machine learning, and AI model deployment. Passionate about solving complex problems and advancing the state of technology. </subtitle><entry><title type="html">Paper Review “Hierarchical Latent Structure for Multi-Modal Vehicle Trajectory Forecasting”</title><link href="ravialdy/ravialdy.github.io/blog/2023/paper-review-HLS/" rel="alternate" type="text/html" title="Paper Review “Hierarchical Latent Structure for Multi-Modal Vehicle Trajectory Forecasting”"/><published>2023-10-31T13:56:00+00:00</published><updated>2023-10-31T13:56:00+00:00</updated><id>ravialdy/ravialdy.github.io/blog/2023/paper-review-HLS</id><content type="html" xml:base="ravialdy/ravialdy.github.io/blog/2023/paper-review-HLS/"><![CDATA[<style>h2{margin-top:1.25em;margin-bottom:.5em}h3{margin-top:1em;margin-bottom:.5em}</style> <h2 id="introduction">Introduction</h2> <p><strong>Disclaimer</strong> : This review is based on my understanding of the reference paper [1]. While I have made much effort to ensure the accuracy of this article, there may things that I have not fully captured. If you notice any misinterpretation or error, please feel free to point them out in the comments section.</p> <p>I’m very excited to present a review of the paper titled “Hierarchical Latent Structure for Multi-Modal Vehicle Trajectory Forecasting” [1] authored by Dooseop Choi and KyoungWook Min. This paper is a very good work proved by its acceptance at the European Conference on Computer Vision (ECCV) 2022.</p> <p>For you who are not familiar with academia world in the AI field yet, ECCV is one of the most prestigious conferences in the domain of computer vision and having a paper accepted there indicates the importance of this work. I truly believe this research paper is crucial for the autonomous driving topic, particularly in trajectory forecasting.</p> <div class="row mt-4"> <div class="col-sm mt-4 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/HLS_Paper/HLS.gif-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/HLS_Paper/HLS.gif-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/HLS_Paper/HLS.gif-1400.webp"/> <img src="/assets/img/HLS_Paper/HLS.gif" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Figure 1. Illustration of how the proposed Hierarchical Latent Structure (HLS) is used in the trajectory forecasting (Image source : D. Choi &amp; K. Min [1]). </div> <h2 id="notations-and-definitions">Notations and Definitions</h2> <table> <thead> <tr> <th>Notation</th> <th>Definition</th> </tr> </thead> <tbody> <tr> <td>\(N\)</td> <td>Number of vehicles in the traffic scene</td> </tr> <tr> <td>\(T\)</td> <td>Total number of timesteps for which trajectories are forecasted</td> </tr> <tr> <td>\(H\)</td> <td>Number of previous timesteps considered for positional history</td> </tr> <tr> <td>\(V_{i}\)</td> <td>The \(i^{th}\) vehicle in the traffic scene</td> </tr> <tr> <td>\(\mathbf{Y}_{i}\)</td> <td>Future positions of \(V_{i}\) for the next \(T\) timesteps</td> </tr> <tr> <td>\(\mathbf{X}_{i}\)</td> <td>Positional history of \(V_{i}\) for the previous \(H\) timesteps at time \(t\)</td> </tr> <tr> <td>\(\mathcal{C}_{i}\)</td> <td>Additional scene information available to \(V_{i}\)</td> </tr> <tr> <td>\(\mathbf{L}^{(1: M)}\)</td> <td>Lane candidates available for \(V_{i}\) at time \(t\)</td> </tr> <tr> <td>\(\mathbf{z}_{l}\)</td> <td>Low-level latent variable used to model the modes</td> </tr> <tr> <td>\(\mathbf{z}_{h}\)</td> <td>High-level latent variable used to model the weights for the modes</td> </tr> <tr> <td>\(p_{\theta}\)</td> <td>Decoder network</td> </tr> <tr> <td>\(p_{\gamma}\)</td> <td>Prior network</td> </tr> <tr> <td>\(\mathcal{L}_{E L B O}\)</td> <td>Modified ELBO objective</td> </tr> <tr> <td>\(q_{\phi}\)</td> <td>Approximated posterior network</td> </tr> <tr> <td>\(f_{\varphi}\)</td> <td>Proposed mode selection network</td> </tr> <tr> <td>VLI</td> <td>Vehicle-Lane Interaction</td> </tr> <tr> <td>V2I</td> <td>Vehicle-to-Vehicle Interaction</td> </tr> </tbody> </table> <h2 id="the-main-problem--mode-blur">The Main Problem : “Mode Blur”</h2> <p>The paper aims to overcome a specific limitation in vehicle trajectory forecasting models that leverage Variational Autoencoders (VAEs) concept called as the “mode blur” problem. For clearer illustration, please take a look at the figure below (this corresponds to the figure 1 in the reference paper [1]) :</p> <div class="row mt-4 justify-content-center"> <div class="col-12 col-md-8 mx-auto mt-4 img-container"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/HLS_Paper/figure1-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/HLS_Paper/figure1-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/HLS_Paper/figure1-1400.webp"/> <img src="/assets/img/HLS_Paper/figure1.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption text-center mb-4"> Figure 2. Illustration of the "mode blur" problem in VAE-based generated trajectory forecasts (Image source : D. Choi &amp; K. Min [1]). </div> <p>As you can see from the figure above, the red vehicle is attempting to forecast its future trajectory represented by the branching gray paths. The challenge faced here lies in the generated forecast trajectories’ that are sometimes between defined lane paths.</p> <p>This phenomenon is what the author mean by the “mode blur” problem. Specifically, the VAE-based model is not committing to a specific path, but rather giving a “blurred” average of possible outcomes.</p> <div class="row mt-4"> <div class="col-12 col-lg mt-4 img-container"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/HLS_Paper/modeblur-previousSOTA-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/HLS_Paper/modeblur-previousSOTA-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/HLS_Paper/modeblur-previousSOTA-1400.webp"/> <img src="/assets/img/HLS_Paper/modeblur-previousSOTA.png" class="img-fluid" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption text-center mb-4"> Figure 3. Example of "mode blur" problem that exists in the previous SOTA model (Image source: Cui et al, 2021 [2]). </div> <p>If you still wonder why the “mode blur” problem can be very important, consider the above figure example taken from the previous SOTA model as observed by D. Choi &amp; K. Min [1]. Before analyzing that figure in more detail, assume that the green bounding box represents the Autonomous Vehicle (AV), the light blue bounding boxes represent surrounding vehicles, and the trajectories (path predictions) of the surrounding vehicles are shown using the solid lines with light blue dots.</p> <div class="row mt-4 justify-content-center"> <div class="col-12 col-md-8 mx-auto mt-4"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/HLS_Paper/scenario2_ModeBlur-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/HLS_Paper/scenario2_ModeBlur-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/HLS_Paper/scenario2_ModeBlur-1400.webp"/> <img src="/assets/img/HLS_Paper/scenario2_ModeBlur.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption text-center mb-4"> Figure 4. Scenario 2 of the "mode blur" problem that exist in the previous SOTA model (Image source : Cui et al, 2021 [2]). </div> <p>In scenario 2, a clear observation here is the overlapping and intersecting trajectories, especially around the intersection. These trajectories seem to be “blurred” between the lanes rather than being clearly defined in one lane or another. While in the scenario 3, despite the clearer trajectory forecasts than the previous one, we can still observe “mode blur” problems. Some predicted trajectories seem to be dispersed across the lane without a distinct path.</p> <p>This issue can lead to the Autonomous Vehicle (AV) having to make frequent adjustments to its path. This is indeed problematic as the AV might need to execute sudden brakes and make abrupt steering changes. This not only results in an uncomfortable ride for the passengers but also raises safety concerns.</p> <div class="row mt-4 justify-content-center"> <div class="col-12 col-md-8 mx-auto mt-4"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/HLS_Paper/scenario3_ModeBlur-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/HLS_Paper/scenario3_ModeBlur-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/HLS_Paper/scenario3_ModeBlur-1400.webp"/> <img src="/assets/img/HLS_Paper/scenario3_ModeBlur.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption text-center mb-4"> Figure 5. Scenario 3 of the "mode blur" problem that exist in the previous SOTA model (Image source : Cui et al, 2021 [2]). </div> <p>The reason for this problem is the use of Variational Autoencoders (VAEs) in the trajectory forecasting models since they have a well-known limitation: the outputs that they generate can often be “blurry”. The authors of paper [1] observed that similar problem also found in the trajectory planning case, not only in the tasks involving image reconstruction and synthesis.</p> <p>VAEs aim to learn a probabilistic latent space representation of the data. When dealing with complex distributions such as future vehicle trajectories, the latent space needs to capture the multi-modal nature of the data, representing different possible future states (modes). Recall that the main objective of the VAEs is to optimize the Evidence Lower Bound Objective (ELBO) on the marginal likelihood of data \(p_\theta(\mathbf{x})\). This lower bound is formulated as:</p> \[\text{ELBO} = \mathbb{E}_{q_\phi(\mathbf{z} \mid \mathbf{x})}[\log p_\theta(\mathbf{x} \mid \mathbf{z})] - D_{KL}(q_\phi(\mathbf{z}|\mathbf{x}) \| p_\theta(\mathbf{z}))\] <p>Two components in the ELBO:</p> <ul> <li>The first term \(\mathbb{E}_{q_\phi(\mathbf{z} \mid \mathbf{x})}[\log p_\theta(\mathbf{x} \mid \mathbf{z})]\) is the reconstruction loss which measures how well the VAE reconstructs the original data when sampled from the approximate posterior \(q_\phi\).</li> <li>The second term \(D_{KL}(q_\phi(\mathbf{z} \mid \mathbf{x}) \| p_\theta(\mathbf{z}))\) is the Kullback-Leibler divergence between the approximate posterior \(q_\phi\) and the prior \(p_\theta\). This term acts as a regularizer, pushing the approximate posterior towards the prior.</li> </ul> <div class="row mt-4"> <div class="col-12 col-lg mt-4 img-container"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/HLS_Paper/VAE_Image-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/HLS_Paper/VAE_Image-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/HLS_Paper/VAE_Image-1400.webp"/> <img src="/assets/img/HLS_Paper/VAE_Image.png" class="img-fluid" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption text-center mb-4"> Figure 6. Variational Autoencoder (VAE) which uses variational bayesian principle (Image source : <a href="https://sebastianraschka.com/teaching/stat453-ss2021/">Sebastian Raschka slide</a>). </div> <div class="row mt-4"> <div class="col-12 col-lg mt-4 img-container"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/HLS_Paper/AEvsVAE_Latent-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/HLS_Paper/AEvsVAE_Latent-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/HLS_Paper/AEvsVAE_Latent-1400.webp"/> <img src="/assets/img/HLS_Paper/AEvsVAE_Latent.png" class="img-fluid" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption text-center mb-4"> Figure 7. Generated latent variable from common Autoencoder (fixed value) vs. VAE (probability distribution) (Image source : <a href="https://www.jeremyjordan.me/variational-autoencoders/">Jeremy Jordan</a>). </div> <p>For more detailed understanding, you can take a look at this very good blogpost <a href="https://lilianweng.github.io/posts/2018-08-12-vae/">Lil’Log</a> or excellent explanation by <a href="https://www.youtube.com/watch?v=YHldNC1SZVk">Ahlad Kumar</a>.</p> <p>As you can see from the objective function above, the VAE wants to minimize reconstruction loss, while the KL divergence term encourages the VAE not to create very distinct and separate clusters for each mode in the latent space but to keep them close to the prior. When the VAE learns to represent data in the latent space, it must balance these two terms. It wants to spread out the representations to minimize reconstruction loss (since the trajectory distribution is multi-modal) but is also constrained by the KL divergence to keep these representations from getting too dispersed.</p> <p>As a consequence, during the generation phase, when the model samples from these latent representations, it also may end up sampling from “in-between” spaces if the distinct modes are not well-separated. This results in outputs that are a blend of several possible outcomes rather than committing to a single, distinct outcome.</p> <p>So in the context of trajectory planning, the “mode blur” problem is most likely happened due to the balancing act between reconstruction loss and the KL divergence done by the ELBO objective function. When generating data, the VAE may generate a predicted trajectory that doesn’t clearly commit to any of the possible paths (like staying in the lane, changing lanes, turning, etc). Instead, it generates a trajectory that lies somewhere in between.</p> <h2 id="key-contributions">Key Contributions</h2> <p>Based on my understanding so far, there are 4 major contributions of this paper [1]:</p> <ol> <li> <p><strong>Mitigating Mode Blur</strong>: Propose a hierarchical latent structure within a VAE-based forecasting model to avoid “mode blur” problem, enabling clearer and more precise trajectory predictions.</p> </li> <li> <p><strong>Context Vectors</strong>: Two lane-level context vectors <code class="language-plaintext highlighter-rouge">VLI</code> and <code class="language-plaintext highlighter-rouge">V2I</code> are conditioned on the low-level latent variables for more accurate trajectory predictions.</p> </li> <li> <p><strong>Additional Methods</strong>: Introduce positional data preprocessing and GAN-based regularization to further enhance the performance.</p> </li> <li> <p><strong>Benchmark Performance</strong>: The state-of-the-art performance on two large-scale real-world datasets.</p> </li> </ol> <div class="row mt-4"> <div class="col-sm mt-4 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/HLS_Paper/VLI-visualization-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/HLS_Paper/VLI-visualization-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/HLS_Paper/VLI-visualization-1400.webp"/> <img src="/assets/img/HLS_Paper/VLI-visualization.png" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Figure 8. Visualization of VLI (Image source : D. Choi &amp; K. Min [1]). </div> <h2 id="hierarchical-latent-structure-hls">Hierarchical Latent Structure (HLS)</h2> <div class="row mt-4"> <div class="col-sm mt-4 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/HLS_Paper/HLS-Avoid-ModeBlur_Example-fotor-20231104133653-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/HLS_Paper/HLS-Avoid-ModeBlur_Example-fotor-20231104133653-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/HLS_Paper/HLS-Avoid-ModeBlur_Example-fotor-20231104133653-1400.webp"/> <img src="/assets/img/HLS_Paper/HLS-Avoid-ModeBlur_Example-fotor-20231104133653.png" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Figure 9. Example of how HLS avoids "mode blur" problem (Image source : D. Choi &amp; K. Min [1]). </div> <h3 id="introduction-to-hls">Introduction to HLS</h3> <p>In the complex traffic scenes with <code class="language-plaintext highlighter-rouge">N</code> vehicles, predicting the future trajectory of each vehicle can be challenging. The Hierarchical Latent Structure (HLS) proposed by D. Choi &amp; K. Min [1] aims to generate plausible trajectory distributions, taking into consideration both individual vehicle history and the overall scene.</p> <p>You may wonder how that kind of approach can avoid the “mode blur” problem that happens in the previous work. The goal of the proposed method is to generate a trajectory distribution \(p\left(\mathbf{Y}_{i} \mid \mathbf{X}_{i}, \mathcal{C}_{i}\right)\) for vehicles. This distribution is supposed to predict the future positions \(\mathbf{Y}_{i}\) based on the past positional history \(\mathbf{X}_{i}\) and the scene context \(\mathcal{C}_{i}\).</p> <p>The generated trajectory distribution is represented as a sum of modes, weighted by their probability or importance. Mathematically, it can be defined like below :</p> \[p\left(\mathbf{Y}_{i} \mid \mathbf{X}_{i}, \mathcal{C}_{i}\right)=\sum_{m=1}^{M} \underbrace{p\left(\mathbf{Y}_{i} \mid E_{m}, \mathbf{X}_{i}, \mathcal{C}_{i}\right)}_{\text {mode }} \underbrace{p\left(E_{m} \mid \mathbf{X}_{i}, \mathcal{C}_{i}\right)}_{\text {weight }}\] <p>The equation above indicates that the trajectory distribution \(p(\mathbf{Y}_{i} \mid \mathbf{X}_{i}, \mathcal{C}_{i})\) can be expressed as a weighted sum of distributions called modes. The term “mode” represents a plausible path, and the term “weight” represents the probability of each mode occurring.</p> <p>Remember that in a standard VAE, the generation process can sometimes collapse to the mean, resulting in less diverse samples. However, in a hierarchical Conditional VAE (C-VAE) which we will discuss in more detail later, the lower levels of the hierarchy are responsible for generating multiple potential trajectories and the higher levels can assign probabilities to the generated trajectories given a certain condition (like the current state of the car and its environment). This doesn’t mean picking the “average” path but selecting from a distribution of paths where each path is weighted according to its fit to the current context.</p> <h3 id="hls-to-avoid-mode-blur">HLS to Avoid “Mode Blur”</h3> <p>The key intuition here is to consider each possible trajectory (mode) separately. It does this through a model that uses latent variables to represent different modes. By modeling each mode with a latent variable, the model can sample trajectories from these modes based on their weights or importance. This allows for diverse trajectory predictions rather than a blurred average.</p> <div class="row mt-4 justify-content-center"> <div class="col-12 col-md-8 mx-auto mt-4 img-container"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/HLS_Paper/figure1b_mode-separately-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/HLS_Paper/figure1b_mode-separately-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/HLS_Paper/figure1b_mode-separately-1400.webp"/> <img src="/assets/img/HLS_Paper/figure1b_mode-separately.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption text-center mb-4"> Figure 10. Illustration of the trajectory forecasting distribution generated by HLS model (Image source : D. Choi &amp; K. Min [1]). </div> <p>The HLS approach consists of two latent variables within a conditional VAE framework:</p> <ol> <li> <p><strong>Low-level latent variable (\(\mathbf{z}_{l}\))</strong>: Used to model individual modes of the trajectory distributions. This is done through a decoder network that generates the vehicle’s future positions and a prior network that defines the distribution of the latent variable given the past positions and scene context.</p> </li> <li> <p><strong>High-level latent variable (\(\mathbf{z}_{h}\))</strong>: Represents the weights for different modes. This is the output of a mode selection network that determines the probabilities associated with different lanes.</p> </li> </ol> <p>The low-level latent variable helps the forecasting model define the mode distribution. This captures the variation within a mode, essentially the variety of possible trajectories given that a vehicle has chosen a particular lane. The high-level latent variable models the weights of the modes, deciding which trajectories are more likely than others based on the current situation.</p> <p>This is done by training the model to reconstruct the future trajectories \(\mathbf{Y}_i\) from the latent variables, while also ensuring that the latent variables are regularized to follow a prior distribution. Here is the mathematical equation of that new objective function :</p> \[\begin{aligned} \mathcal{L}_{ELBO} = &amp; -\mathbb{E}_{\mathbf{z}_{l} \sim q_{\phi}}\left[\log p_{\theta}\left(\mathbf{Y}_{i} \mid \mathbf{z}_{l}, \mathbf{X}_{i}, \mathcal{C}_{i}^{m}\right)\right] \\ &amp; + \beta KL\Big(q_{\phi}\left(\mathbf{z}_{l} \mid \mathbf{Y}_{i}, \mathbf{X}_{i}, \mathcal{C}_{i}^{m}\right)\| p_{\gamma}\left(\mathbf{z}_{l} \mid \mathbf{X}_{i}, \mathcal{C}_{i}^{m}\right)\Big), \end{aligned}\] <p>As you can see from the equation above, the expectation \(\mathbb{E}_{\mathbf{z}_l \sim q_{\phi}}[ \cdot ]\) term forces the model to reconstruct \(\mathbf{Y}_i\) from the low-level latent variables \(\mathbf{z}_l\), input \(\mathbf{X}_i\), and some conditioning context \(\mathcal{C}_i^{m}\). This implies that the model will learn a different prior for different subsets of the data, which is guided by the input and the context. When the conditional prior is a complex distribution such as a mixture of Gaussians, it has multiple modes corresponding to different data variations.</p> <p>In addition to that, the KL divergence term in the modified ELBO is weighted by a factor \(\beta\). By adjusting this parameter, we can find a trade-off between reconstruction and KL divergence aspects, potentially avoiding the mode collapse problem, where the model generates outputs that are too similar to each other, or the blurring issue, where the details in the reconstructed outputs become indistinct. Adjusting \(\beta\) allows for a more flexible and controlled latent space representation, which is crucial for generating diverse and sharp outputs.</p> <p>By having a hierarchical structure, the C-VAE can separate the task of generating trajectories (done by low-level latent variables) from the task of weighting them according to their likelihood (achieved with high-level latent variables). Thus, when it generates a sample, it’s not just picking the average or most common path but rather sampling from a distribution of paths that are likely under current conditions.</p> <h3 id="hls-overall-architecture">HLS Overall Architecture</h3> <div class="row mt-4"> <div class="col-sm mt-4 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/HLS_Paper/HLS_Architecture-fotor-20231104133313-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/HLS_Paper/HLS_Architecture-fotor-20231104133313-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/HLS_Paper/HLS_Architecture-fotor-20231104133313-1400.webp"/> <img src="/assets/img/HLS_Paper/HLS_Architecture-fotor-20231104133313.png" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Figure 11. Diagram of HLS architecture (Image source : D. Choi &amp; K. Min [1]). </div> <p>The proposed method from the paper focuses on predicting the future trajectory of vehicles by considering the interaction with the surrounding environment, particularly lanes and other vehicles. The approach is organized into the following modules:</p> <ol> <li><strong>Feature Extraction Module</strong>: <ul> <li>This module uses three LSTM networks to encode positional data for vehicles and lanes.</li> <li>Data preprocessing involves calculating speed, heading for vehicles, and tangent vectors for lanes. This is to capture the motion history and lane’s orientation, making predictions more accurate.</li> </ul> </li> <li><strong>Scene Context Extraction Module</strong>: <ul> <li>It considers the interactions of a vehicle with its reference lane <code class="language-plaintext highlighter-rouge">VLI</code> and other surrounding vehicles <code class="language-plaintext highlighter-rouge">V2I</code>.</li> <li>For the lane interaction, it uses attention mechanisms to weigh the importance of surrounding lanes relative to the reference lane.</li> <li>For vehicle-to-vehicle interactions, a Graph Neural Network (GNN) is employed. Only vehicles within a certain distance from the reference lane are considered. The interactions are captured through multiple rounds of message passing, and the final context vector represents the interaction history.</li> <li>There’s an emphasis on the distance threshold, which is empirically set to 5 meters, representing the typical distance between two nearby lane centerlines in straight roads.</li> </ul> </li> <li><strong>Mode Selection Network</strong>: <ul> <li>Determines the weights for different modes of trajectory distribution. Each mode corresponds to a lane, capturing the assumption that the lanes heavily influence the vehicle’s motion.</li> <li>It uses lane-level scene context vectors, which contain information about both lane and vehicle interactions.</li> <li>A softmax operation is applied to get the final weights, representing the probability distribution over different modes.</li> </ul> </li> <li><strong>Encoder, Prior, and Decoder</strong>: <ul> <li> <p><strong>Encoder</strong>: This is often referred to as the recognition network. It is responsible for approximating the posterior distribution and is implemented as Multi-Layer Perceptrons (MLPs) with the encoding of the future trajectory \(\tilde{\mathbf{Y}}_{i}\) and the lane-level scene context vector \(\mathbf{c}_{i}^{m}\) as inputs. The encoder outputs two vectors, mean \(\mu_{e}\) and standard deviation \(\sigma_{e}\). Notably, the encoder is used only during the training phase because the future trajectory \(\mathbf{Y}_{i}\) is not available during inference.</p> </li> <li> <p><strong>Prior</strong>: This represents the prior distribution over the latent variable and is also implemented as MLPs. It takes the lane-level scene context vector \(\mathbf{c}_{i}^{m}\) as its input and outputs mean \(\mu_{p}\) and standard deviation \(\sigma_{p}\) vectors.</p> </li> <li> <p><strong>Decoder</strong>: This network is responsible for generating predictions for the future trajectory \(\hat{\mathbf{Y}}_{i}\). It does so via an LSTM network. The input to the LSTM consists of an embedding of the predicted position \(\mathbf{e}_{i}^{t}\) along with the lane-level scene context vector \(\mathbf{c}_{i}^{m}\) and the latent variable \(\mathbf{z}_{l}\). The LSTM updates its hidden state \(\mathbf{h}_{i}^{t+1}\) based on these inputs, and the new predicted position \(\hat{\mathbf{p}}_{i}^{t+1}\) is generated from this hidden state.</p> </li> </ul> </li> </ol> <p>The design of this method aims to provide a holistic understanding of the vehicle’s motion by considering both lane and vehicle interactions. Lanes guide the general direction of movement, while nearby vehicles influence more immediate decisions like lane changes or speed adjustments.</p> <h2 id="conclusion">Conclusion</h2> <div class="row mt-4"> <div class="col-sm mt-4 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/HLS_Paper/Example_HLS_nuScene-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/HLS_Paper/Example_HLS_nuScene-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/HLS_Paper/Example_HLS_nuScene-1400.webp"/> <img src="/assets/img/HLS_Paper/Example_HLS_nuScene.png" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Figure 12. Example of trajectory forecasting generated by HLS on nuScenes dataset (Image source : D. Choi &amp; K. Min [1]). </div> <p>This paper proposes a novel and unique way to tackle the problem of “mode blur” predictions in trajectory forecasting. Instead of just mixing all possible paths, it uses a system of weights to represent different possible futures. This is achieved by introducing a hierarchy in latent variables which can make the model to be more accurate in representing different possible outcomes. The use of lane-level context vectors can add more precision, especially in understanding vehicle-lane and vehicle-vehicle interactions. With the additional techniques like positional data processing and GAN-based regularization, this work not only sharpens the predictions but also can outperform the previous SOTA models in terms of accuracy.</p>]]></content><author><name></name></author><category term="blogpost"/><category term="Autonomous"/><category term="Driving,"/><category term="Trajectory"/><category term="Planning"/><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Grad-CAM Demystified, Understanding the Magic Behind Visual Explanations in Neural Networks</title><link href="ravialdy/ravialdy.github.io/blog/2023/gradcam-howitworks/" rel="alternate" type="text/html" title="Grad-CAM Demystified, Understanding the Magic Behind Visual Explanations in Neural Networks"/><published>2023-10-20T13:56:00+00:00</published><updated>2023-10-20T13:56:00+00:00</updated><id>ravialdy/ravialdy.github.io/blog/2023/gradcam-howitworks</id><content type="html" xml:base="ravialdy/ravialdy.github.io/blog/2023/gradcam-howitworks/"><![CDATA[<style>h2{margin-top:1.25em;margin-bottom:.5em}h3{margin-top:1em;margin-bottom:.5em}</style> <h2 id="introduction">Introduction</h2> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/gradcam/gradcam_our_result-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/gradcam/gradcam_our_result-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/gradcam/gradcam_our_result-1400.webp"/> <img src="/assets/img/gradcam/gradcam_our_result.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Figure 1. Grad-CAM visualization that we will implement in this blogpost. </div> <p>Convolutional Neural Networks (CNNs) are amazing. They can recognize cats in pictures, help self-driving cars see, and even beat humans at games. But what most people see about neural networks is this, they’re like magic boxes: data goes in, and the answer comes out, without knowing what happens in between. So, how do we know what part of an image the network finds important for its decision? Introducing Grad-CAM method, a technique that helps us “see” what the network is looking at.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/gradcam/GradCAM-Example-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/gradcam/GradCAM-Example-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/gradcam/GradCAM-Example-1400.webp"/> <img src="/assets/img/gradcam/GradCAM-Example.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Figure 2. Example of how Grad-CAM visualization shows the important part for the model's decision on different classes (Image source : <a href="https://github.com/kazuto1011/grad-cam-pytorch">Kazuto</a>). </div> <h2 id="what-is-grad-cam">What is Grad-CAM?</h2> <p>Grad-CAM stands for Gradient-weighted Class Activation Mapping. Why the name is like that? In short, we use gradient to help us understand how neural networks behave in certain circumstances, while activation here is analogous with the level of excitement or interest the neural network has when it comes to certain features used in recognizing the important part in the image (we will discuss in detail about it later). How it does that? Basically, Grad-CAM will create what we call a “heatmap.” Imagine you have your cat picture. Now, think of putting a see-through red paper over it. This red paper will have some areas darker and some areas lighter. The darker areas show where the neural network looked the most. Maybe the network looked a lot at the cat’s eyes and a little at the tail. This heatmap will help you “see” what parts of the picture made the neural network decide it’s looking at a cat. It’s like the network is saying, “Look, I think this is a cat because of these parts of the picture.”</p> <h2 id="the-core-idea">The Core Idea</h2> <p>Grad-CAM will use something called “gradients” which can tell us how much each neuron’s activity would need to change in order to affect the final decision (class scores or logits that are output by the neural network) of the model. The key intuition here is that if the gradient is large in magnitude, a small change in the neuron’s activity will have a significant impact on the final decision. Conversely, if the gradient is small, the neuron’s contribution to the final decision is relatively minor. Grad-CAM also often uses deeper layers in order to visualize important part of the image. In a CNN, the early layers usually can only understand simple things like edges or colors. The deeper you go, the more complex the things they understand, like ears or whiskers. Grad-CAM focuses on the last set of these layers because they understand both the important details (like whiskers) and the bigger picture (like the shape of a cat). Remember that in the context of CNN, feature maps in the early layers of can only capture basic features like edges and textures. But, as you move deeper into the network, the feature maps begin to assemble these into more complex structures, capturing higher-level features like shapes, patterns, and even entire objects in some cases.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/gradcam/deeplearning_featuremaps-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/gradcam/deeplearning_featuremaps-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/gradcam/deeplearning_featuremaps-1400.webp"/> <img src="/assets/img/gradcam/deeplearning_featuremaps.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Figure 3. Illustration of how CNN and common NN architecture can learn more complex features as the layer goes deeper (Image source : <a href="https://julien-vitay.net/lecturenotes-neurocomputing/3-deeplearning/3-CNN.html">Julien Vitay</a>). </div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/gradcam/gradcam_different_layers-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/gradcam/gradcam_different_layers-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/gradcam/gradcam_different_layers-1400.webp"/> <img src="/assets/img/gradcam/gradcam_different_layers.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Figure 4. Illustration of the effect of deeper layers towards Grad-CAM visualization (Image source : Selvaraju et al, 2017 [1]). </div> <h2 id="how-does-it-work-in-quite-detail">How Does it Work in Quite Detail?</h2> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/gradcam/gradcam_detail_works-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/gradcam/gradcam_detail_works-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/gradcam/gradcam_detail_works-1400.webp"/> <img src="/assets/img/gradcam/gradcam_detail_works.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Figure 5. Overview Grad-CAM architecture (Image source : Selvaraju et al, 2017 [1]). </div> <h3 id="step-1-backward-pass">Step 1: Backward Pass</h3> <p>First, we need to find out how much each part of our image contributed to the final decision. So, we go backward through the network, from the output (“this is a cat”) toward the input image. As we go back, we calculate something called gradients. Remember that the “gradient” of a neuron with respect to the final decision can give us a measure of sensitivity. Specifically, it tells us how much the final output (e.g., the probability score for the class “cat”) would change if the activity of that particular neuron were to change by a small amount. In mathematical terms, if \(y\) is the final output and \(A_{ij}^k\) is the activation of neuron \(k\) at position \((i, j)\) in some layer, then \(\frac{\partial y}{\partial A_{ij}^k}\) is the gradient that tells us the rate of change of \(y\) with respect to \(A_{ij}^k\).</p> <h3 id="step-2-average-pooling">Step 2: Average Pooling</h3> <p>We then average these gradients across the spatial dimensions (width and height) of each feature map. This gives us a single number for each feature map, which we call the “importance weight.”</p> <p>The math looks like this:</p> \[\alpha_{k}^{c} = \frac{1}{Z} \sum_{i} \sum_{j} \frac{\partial y^{c}}{\partial A_{i j}^{k}}\] <p>Here, \(\alpha_{k}^{c}\) is the importance weight for feature map \(k\) when identifying class \(c\).</p> <h3 id="step-3-weighted-sum">Step 3: Weighted Sum</h3> <p>Next, we take a weighted sum of our original feature maps, using these importance weights. This gives us a rough heatmap. We will explain that in more detail about how it is used in the step 5.</p> \[L_{\text{Grad-CAM}}^{c} = \text{ReLU}\left(\sum_{k} \alpha_{k}^{c} A^{k}\right)\] <h3 id="step-4-relu-activation">Step 4: ReLU Activation</h3> <p>Finally, we apply a ReLU (Rectified Linear Unit) function to this heatmap. Why? Because we’re only interested in the parts of the image that positively influence the final decision.</p> <h3 id="step-5-understanding-the-heatmap">Step 5: Understanding the Heatmap</h3> <p>At this point, you might wonder, “How exactly does the weighted sum of feature maps and ReLU activation contribute to generating a heatmap?”</p> <p>The heatmap \(L_{\text{Grad-CAM}}^{c}\) is essentially a 2D spatial map of the image that highlights the important regions, which have been “weighted” based on their contribution to the class score. Recall that this weighted sum can be formally represented as:</p> \[L_{\text{Grad-CAM}}^{c} = \text{ReLU}\left(\sum_{k} \alpha_{k}^{c} A^{k}\right)\] <p>Here, \(\alpha_{k}^{c}\) serves as a weight indicating the importance of feature map \(A^{k}\) for the particular class \(c\). So, when we multiply \(\alpha_{k}^{c}\) with the feature map \(A^{k}\), we’re essentially weighing the feature map based on its importance for class \(c\).</p> <p>After the weighted sum, we apply the ReLU non-linearity function. Why ReLU? This is to ensure that only the features that have a positive influence on the class of interest are kept. ReLU zeroes out negative values, leaving only the positive regions that are important for identifying the specific class. The ReLU function can be represented mathematically as:</p> \[\text{ReLU}(x) = \max(0, x)\] <p>Thus, the heatmap generated is a filtered version of the weighted sum of feature maps, where only the ‘positively contributing’ features are illuminated. This enables you to see which regions in the image were pivotal in making the final class decision.</p> <h2 id="a-simple-pytorch-grad-cam-implementation">A Simple PyTorch Grad-CAM Implementation</h2> <p>To see Grad-CAM in action, let’s walk through a straightforward example using PyTorch. We’ll use a pretrained VGG16 model for this demonstration.</p> <p>First, make sure to install PyTorch if you haven’t already.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install </span>torch torchvision
</code></pre></div></div> <h3 id="import-libraries">Import Libraries</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">torch</span>
<span class="kn">import</span> <span class="n">torch.nn</span> <span class="k">as</span> <span class="n">nn</span>
<span class="kn">import</span> <span class="n">torchvision.models</span> <span class="k">as</span> <span class="n">models</span>
<span class="kn">import</span> <span class="n">torchvision.transforms</span> <span class="k">as</span> <span class="n">transforms</span>
<span class="kn">from</span> <span class="n">PIL</span> <span class="kn">import</span> <span class="n">Image</span>
</code></pre></div></div> <h3 id="load-pretrained-model">Load Pretrained Model</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Load a pretrained VGG16 model
</span><span class="n">model</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="nf">vgg16</span><span class="p">(</span><span class="n">pretrained</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">model</span><span class="p">.</span><span class="nf">eval</span><span class="p">()</span>
</code></pre></div></div> <h3 id="utility-function-to-get-model-features-and-gradients">Utility Function to Get Model Features and Gradients</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Tuple</span>

<span class="k">def</span> <span class="nf">get_features_gradients</span><span class="p">(</span><span class="n">model</span><span class="p">:</span> <span class="n">nn</span><span class="p">.</span><span class="n">Module</span><span class="p">,</span> <span class="n">x</span><span class="p">:</span> <span class="n">torch</span><span class="p">.</span><span class="n">Tensor</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Tuple</span><span class="p">[</span><span class="n">torch</span><span class="p">.</span><span class="n">Tensor</span><span class="p">,</span> <span class="n">torch</span><span class="p">.</span><span class="n">Tensor</span><span class="p">]:</span>
    <span class="sh">"""</span><span class="s">
    Forward pass to get the features and register hook to get gradients.
    
    Parameters:
    - model (nn.Module): Neural network model
    - x (torch.Tensor): Input image tensor
    
    Returns:
    - features (torch.Tensor): Extracted features from the last convolutional layer
    - gradients (torch.Tensor): Gradients w.r.t the features
    </span><span class="sh">"""</span>
    <span class="n">features</span> <span class="o">=</span> <span class="bp">None</span>
    <span class="n">gradients</span> <span class="o">=</span> <span class="bp">None</span>
    
    <span class="k">def</span> <span class="nf">hook_feature</span><span class="p">(</span><span class="n">module</span><span class="p">,</span> <span class="nb">input</span><span class="p">,</span> <span class="n">output</span><span class="p">):</span>
        <span class="k">nonlocal</span> <span class="n">features</span>
        <span class="n">features</span> <span class="o">=</span> <span class="n">output</span><span class="p">.</span><span class="nf">detach</span><span class="p">()</span>
        
    <span class="k">def</span> <span class="nf">hook_gradient</span><span class="p">(</span><span class="n">module</span><span class="p">,</span> <span class="n">grad_input</span><span class="p">,</span> <span class="n">grad_output</span><span class="p">):</span>
        <span class="k">nonlocal</span> <span class="n">gradients</span>
        <span class="n">gradients</span> <span class="o">=</span> <span class="n">grad_output</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">detach</span><span class="p">()</span>
        
    <span class="c1"># Register hooks
</span>    <span class="n">handle_forward</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="n">features</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nf">register_forward_hook</span><span class="p">(</span><span class="n">hook_feature</span><span class="p">)</span>
    <span class="n">handle_backward</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="n">features</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nf">register_backward_hook</span><span class="p">(</span><span class="n">hook_gradient</span><span class="p">)</span>
    
    <span class="c1"># Forward and backward pass
</span>    <span class="n">model</span><span class="p">.</span><span class="nf">zero_grad</span><span class="p">()</span>
    <span class="n">output</span> <span class="o">=</span> <span class="nf">model</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
    <span class="c1"># Class-specific backprop
</span>    <span class="n">output</span><span class="p">.</span><span class="nf">backward</span><span class="p">(</span><span class="n">torch</span><span class="p">.</span><span class="nc">Tensor</span><span class="p">([[</span><span class="mi">1</span> <span class="k">if</span> <span class="n">idx</span> <span class="o">==</span> <span class="mi">243</span> <span class="k">else</span> <span class="mi">0</span> <span class="k">for</span> <span class="n">idx</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">output</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">])]]))</span>
    
    <span class="c1"># Remove hooks
</span>    <span class="n">handle_forward</span><span class="p">.</span><span class="nf">remove</span><span class="p">()</span>
    <span class="n">handle_backward</span><span class="p">.</span><span class="nf">remove</span><span class="p">()</span>
    
    <span class="k">return</span> <span class="n">features</span><span class="p">,</span> <span class="n">gradients</span>
</code></pre></div></div> <h3 id="generate-grad-cam-heatmap">Generate Grad-CAM Heatmap</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Tuple</span>

<span class="k">def</span> <span class="nf">generate_grad_cam</span><span class="p">(</span><span class="n">features</span><span class="p">:</span> <span class="n">torch</span><span class="p">.</span><span class="n">Tensor</span><span class="p">,</span> <span class="n">gradients</span><span class="p">:</span> <span class="n">torch</span><span class="p">.</span><span class="n">Tensor</span><span class="p">,</span> <span class="n">image_shape</span><span class="p">:</span> <span class="n">Tuple</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">torch</span><span class="p">.</span><span class="n">Tensor</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    Generate Grad-CAM heatmap.

    Parameters:
    - features (torch.Tensor): Extracted features from the last convolutional layer
    - gradients (torch.Tensor): Gradients w.r.t the features
    - image_shape (Tuple[int, int]): Original shape of the input image (height, width)

    Returns:
    - torch.Tensor: Grad-CAM heatmap
    </span><span class="sh">"""</span>
    <span class="c1"># Global average pooling on gradients to get neuron importance
</span>    <span class="n">alpha</span> <span class="o">=</span> <span class="n">gradients</span><span class="p">.</span><span class="nf">mean</span><span class="p">(</span><span class="n">dim</span><span class="o">=</span><span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="n">keepdim</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

    <span class="c1"># Weighted sum of feature maps based on neuron importance
</span>    <span class="n">weighted_features</span> <span class="o">=</span> <span class="n">features</span> <span class="o">*</span> <span class="n">alpha</span>

    <span class="c1"># ReLU applied on weighted combination of feature maps
</span>    <span class="n">heatmap</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">functional</span><span class="p">.</span><span class="nf">relu</span><span class="p">(</span><span class="n">weighted_features</span><span class="p">.</span><span class="nf">sum</span><span class="p">(</span><span class="n">dim</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">keepdim</span><span class="o">=</span><span class="bp">True</span><span class="p">))</span>
    
    <span class="c1"># Resizing the heatmap to original image size
</span>    <span class="n">heatmap</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">functional</span><span class="p">.</span><span class="nf">interpolate</span><span class="p">(</span><span class="n">heatmap</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="n">image_shape</span><span class="p">,</span> <span class="n">mode</span><span class="o">=</span><span class="sh">'</span><span class="s">bilinear</span><span class="sh">'</span><span class="p">,</span> <span class="n">align_corners</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">heatmap</span>
</code></pre></div></div> <h3 id="function-to-overlay-heatmap-on-original-image">Function to Overlay Heatmap on Original Image</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">cv2</span>
<span class="kn">import</span> <span class="n">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Union</span>
<span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="k">def</span> <span class="nf">overlay_heatmap_on_image</span><span class="p">(</span><span class="n">image</span><span class="p">:</span> <span class="n">Union</span><span class="p">[</span><span class="n">np</span><span class="p">.</span><span class="n">ndarray</span><span class="p">,</span> <span class="n">Image</span><span class="p">.</span><span class="n">Image</span><span class="p">],</span> 
                             <span class="n">heatmap</span><span class="p">:</span> <span class="n">Union</span><span class="p">[</span><span class="n">np</span><span class="p">.</span><span class="n">ndarray</span><span class="p">,</span> <span class="n">torch</span><span class="p">.</span><span class="n">Tensor</span><span class="p">],</span> 
                             <span class="n">alpha</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">0.5</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">np</span><span class="p">.</span><span class="n">ndarray</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    Overlay the Grad-CAM heatmap on the original image.
    
    Parameters:
    - image (np.ndarray or PIL.Image): Original input image
    - heatmap (Union[np.ndarray, torch.Tensor]): Grad-CAM heatmap
    - alpha (float): Weight of the heatmap when overlaying
    
    Returns:
    - np.ndarray: Image with heatmap overlaid
    </span><span class="sh">"""</span>
    <span class="c1"># Convert PIL image to numpy array if necessary
</span>    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">Image</span><span class="p">.</span><span class="n">Image</span><span class="p">):</span>
        <span class="n">image</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">(</span><span class="n">image</span><span class="p">)</span>
    
    <span class="c1"># Convert torch.Tensor to numpy array if necessary
</span>    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">heatmap</span><span class="p">,</span> <span class="n">torch</span><span class="p">.</span><span class="n">Tensor</span><span class="p">):</span>
        <span class="n">heatmap</span> <span class="o">=</span> <span class="n">heatmap</span><span class="p">.</span><span class="nf">numpy</span><span class="p">()</span>
    
    <span class="c1"># Normalize the heatmap and convert to RGB format
</span>    <span class="n">heatmap_normalized</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="nf">normalize</span><span class="p">(</span><span class="n">heatmap</span><span class="p">,</span> <span class="bp">None</span><span class="p">,</span> <span class="n">alpha</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">beta</span><span class="o">=</span><span class="mi">255</span><span class="p">,</span> <span class="n">norm_type</span><span class="o">=</span><span class="n">cv2</span><span class="p">.</span><span class="n">NORM_MINMAX</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="n">cv2</span><span class="p">.</span><span class="n">CV_8U</span><span class="p">)</span>
    <span class="n">heatmap_colored</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="nf">applyColorMap</span><span class="p">(</span><span class="n">heatmap_normalized</span><span class="p">,</span> <span class="n">cv2</span><span class="p">.</span><span class="n">COLORMAP_JET</span><span class="p">)</span>
    
    <span class="c1"># Resize heatmap to match the image size
</span>    <span class="n">heatmap_resized</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="nf">resize</span><span class="p">(</span><span class="n">heatmap_colored</span><span class="p">,</span> <span class="p">(</span><span class="n">image</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">image</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span>
    
    <span class="c1"># Overlay heatmap on image
</span>    <span class="n">overlayed</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="nf">addWeighted</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="mi">1</span> <span class="o">-</span> <span class="n">alpha</span><span class="p">,</span> <span class="n">heatmap_resized</span><span class="p">,</span> <span class="n">alpha</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
    
    <span class="k">return</span> <span class="n">overlayed</span>
</code></pre></div></div> <h3 id="function-to-visualize-heatmap">Function to Visualize Heatmap</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Union</span>
<span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="n">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>

<span class="k">def</span> <span class="nf">visualize_heatmap</span><span class="p">(</span><span class="n">image</span><span class="p">:</span> <span class="n">Union</span><span class="p">[</span><span class="n">np</span><span class="p">.</span><span class="n">ndarray</span><span class="p">,</span> <span class="n">Image</span><span class="p">.</span><span class="n">Image</span><span class="p">],</span> 
                      <span class="n">heatmap</span><span class="p">:</span> <span class="n">torch</span><span class="p">.</span><span class="n">Tensor</span><span class="p">,</span> 
                      <span class="n">figsize</span><span class="p">:</span> <span class="n">Tuple</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="nb">int</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">6</span><span class="p">))</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    Visualize the original image, the Grad-CAM heatmap, and the overlayed image.
    
    Parameters:
    - image (Union[np.ndarray, Image.Image]): The original input image.
    - heatmap (torch.Tensor): The Grad-CAM heatmap.
    - figsize (Tuple[int, int]): The size of the figure for plotting.
    
    Returns:
    - None
    </span><span class="sh">"""</span>
    <span class="c1"># Normalize the heatmap for visualization
</span>    <span class="n">heatmap_normalized</span> <span class="o">=</span> <span class="n">heatmap</span><span class="p">.</span><span class="nf">squeeze</span><span class="p">().</span><span class="nf">cpu</span><span class="p">().</span><span class="nf">numpy</span><span class="p">()</span>
    <span class="n">heatmap_normalized</span> <span class="o">=</span> <span class="p">(</span><span class="n">heatmap_normalized</span> <span class="o">-</span> <span class="n">heatmap_normalized</span><span class="p">.</span><span class="nf">min</span><span class="p">())</span> <span class="o">/</span> <span class="p">(</span><span class="n">heatmap_normalized</span><span class="p">.</span><span class="nf">max</span><span class="p">()</span> <span class="o">-</span> <span class="n">heatmap_normalized</span><span class="p">.</span><span class="nf">min</span><span class="p">())</span>
    
    <span class="c1"># Overlay the heatmap on the original image
</span>    <span class="n">overlayed_image</span> <span class="o">=</span> <span class="nf">overlay_heatmap_on_image</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">heatmap_normalized</span><span class="p">)</span>
    
    <span class="c1"># Create the plot
</span>    <span class="n">plt</span><span class="p">.</span><span class="nf">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="n">figsize</span><span class="p">)</span>
    
    <span class="n">plt</span><span class="p">.</span><span class="nf">subplot</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="sh">'</span><span class="s">Original Image</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="nf">imshow</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">(</span><span class="n">image</span><span class="p">))</span>
    <span class="n">plt</span><span class="p">.</span><span class="nf">axis</span><span class="p">(</span><span class="sh">'</span><span class="s">off</span><span class="sh">'</span><span class="p">)</span>
    
    <span class="n">plt</span><span class="p">.</span><span class="nf">subplot</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="sh">'</span><span class="s">Grad-CAM Heatmap</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="nf">imshow</span><span class="p">(</span><span class="n">heatmap_normalized</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="sh">'</span><span class="s">jet</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="nf">axis</span><span class="p">(</span><span class="sh">'</span><span class="s">off</span><span class="sh">'</span><span class="p">)</span>
    
    <span class="n">plt</span><span class="p">.</span><span class="nf">subplot</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="sh">'</span><span class="s">Overlayed Image</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="nf">imshow</span><span class="p">(</span><span class="n">cv2</span><span class="p">.</span><span class="nf">cvtColor</span><span class="p">(</span><span class="n">overlayed_image</span><span class="p">,</span> <span class="n">cv2</span><span class="p">.</span><span class="n">COLOR_BGR2RGB</span><span class="p">))</span>
    <span class="n">plt</span><span class="p">.</span><span class="nf">axis</span><span class="p">(</span><span class="sh">'</span><span class="s">off</span><span class="sh">'</span><span class="p">)</span>
    
    <span class="n">plt</span><span class="p">.</span><span class="nf">tight_layout</span><span class="p">()</span>
    <span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div></div> <h3 id="putting-it-all-together">Putting it All Together</h3> <p>Now, let’s apply Grad-CAM on an example image.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Load and preprocess an example image (here, 'bull_mastiff.jpg' is an example image file)
</span><span class="n">input_image</span> <span class="o">=</span> <span class="n">Image</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="sh">"</span><span class="s">/content/bull_mastiff.jpg</span><span class="sh">"</span><span class="p">).</span><span class="nf">resize</span><span class="p">((</span><span class="mi">224</span><span class="p">,</span> <span class="mi">224</span><span class="p">))</span>
<span class="n">preprocess</span> <span class="o">=</span> <span class="n">transforms</span><span class="p">.</span><span class="nc">Compose</span><span class="p">([</span>
    <span class="n">transforms</span><span class="p">.</span><span class="nc">ToTensor</span><span class="p">(),</span>
    <span class="n">transforms</span><span class="p">.</span><span class="nc">Normalize</span><span class="p">(</span><span class="n">mean</span><span class="o">=</span><span class="p">[</span><span class="mf">0.485</span><span class="p">,</span> <span class="mf">0.456</span><span class="p">,</span> <span class="mf">0.406</span><span class="p">],</span> <span class="n">std</span><span class="o">=</span><span class="p">[</span><span class="mf">0.229</span><span class="p">,</span> <span class="mf">0.224</span><span class="p">,</span> <span class="mf">0.225</span><span class="p">]),</span>
<span class="p">])</span>
<span class="n">input_tensor</span> <span class="o">=</span> <span class="nf">preprocess</span><span class="p">(</span><span class="n">input_image</span><span class="p">).</span><span class="nf">unsqueeze</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

<span class="c1"># Get features and gradients
</span><span class="n">features</span><span class="p">,</span> <span class="n">gradients</span> <span class="o">=</span> <span class="nf">get_features_gradients</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">input_tensor</span><span class="p">)</span>

<span class="c1"># Generate Grad-CAM heatmap
</span><span class="n">image_shape</span> <span class="o">=</span> <span class="p">(</span><span class="n">input_image</span><span class="p">.</span><span class="n">height</span><span class="p">,</span> <span class="n">input_image</span><span class="p">.</span><span class="n">width</span><span class="p">)</span>
<span class="n">heatmap</span> <span class="o">=</span> <span class="nf">generate_grad_cam</span><span class="p">(</span><span class="n">features</span><span class="p">,</span> <span class="n">gradients</span><span class="p">,</span> <span class="n">image_shape</span><span class="p">)</span>

<span class="c1"># Visualize the heatmap
</span><span class="nf">visualize_heatmap</span><span class="p">(</span><span class="n">input_image</span><span class="p">,</span> <span class="n">heatmap</span><span class="p">)</span>
</code></pre></div></div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/gradcam/gradcam_our_result-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/gradcam/gradcam_our_result-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/gradcam/gradcam_our_result-1400.webp"/> <img src="/assets/img/gradcam/gradcam_our_result.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Figure 6. Grad-CAM visualization result. </div> <p>In this example, we focused on the ‘bull mastiff’ class, which corresponds to index 243 in the ImageNet dataset. You can replace this with the index for any other class you’re interested in.</p> <h2 id="conclusion">Conclusion</h2> <p>Grad-CAM is like understanding how exactly neural networks make a decision. It allows the network to tell us, “Hey, I think this is a cat because of these whiskers and this tail.” And it does this all without requiring any change to the existing model architecture and retraining the model, making it a powerful tool for understanding these complex networks.</p> <p>I hope this blog post has demystified Grad-CAM for you. It’s a very good visualization method that can explain the decision of complex neural networks, letting us see what’s happening under the hood.</p>]]></content><author><name></name></author><category term="blogpost"/><category term="Computer"/><category term="Vision"/><category term="(CV),"/><category term="GradCAM,"/><category term="Visualization"/><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Understanding Phenomenal REINFORCE Policy Gradient Method</title><link href="ravialdy/ravialdy.github.io/blog/2023/reinforce-blog/" rel="alternate" type="text/html" title="Understanding Phenomenal REINFORCE Policy Gradient Method"/><published>2023-10-15T13:56:00+00:00</published><updated>2023-10-15T13:56:00+00:00</updated><id>ravialdy/ravialdy.github.io/blog/2023/reinforce-blog</id><content type="html" xml:base="ravialdy/ravialdy.github.io/blog/2023/reinforce-blog/"><![CDATA[<style>h2{margin-top:1.25em;margin-bottom:.5em}h3{margin-top:1em;margin-bottom:.5em}</style> <h2 id="introduction">Introduction</h2> <p>Welcome to my blog post! Today we are going to discuss about a very fascinating and important topic in the world of Reinforcement Learning (RL) — the Policy Gradient REINFORCE Method. This method is quite famous for solving some complex problems in RL. Don’t worry if you’re new to this field, I will try to keep things simple and easy to understand. First of all, I will be focusing on the background of the Policy Gradient Theorem and why it was proposed in the first place.</p> <h3 id="brief-recap-about-reinforcement-learning">Brief Recap about Reinforcement Learning</h3> <p>Before diving into the core method, it’s important to get some basics right. Imagine we have a small robot placed at the entrance of a maze. The maze is simple: it has walls, open passages, and a cheese located at the exit. The robot’s ultimate goal is to find the most efficient path to reach the cheese. In RL, an agent (a robot in this case) interacts with an environment (like a maze). At each time \(t\), the agent is in a state \(s_t\), takes an action \(a_t\), and receives a reward \(r_t\).</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/reinforce/DALL%C2%B7E%202023-10-24%2015.38.59%20-%20Vector%20design%20of%20a%20playful%20scene%20where%20a%20cartoon%20robot%20is%20gearing%20up%20to%20enter%20a%20maze.%20The%20maze's%20pathways%20are%20clear,%20with%20walls%20separating%20the%20routes-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/reinforce/DALL%C2%B7E%202023-10-24%2015.38.59%20-%20Vector%20design%20of%20a%20playful%20scene%20where%20a%20cartoon%20robot%20is%20gearing%20up%20to%20enter%20a%20maze.%20The%20maze's%20pathways%20are%20clear,%20with%20walls%20separating%20the%20routes-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/reinforce/DALL%C2%B7E%202023-10-24%2015.38.59%20-%20Vector%20design%20of%20a%20playful%20scene%20where%20a%20cartoon%20robot%20is%20gearing%20up%20to%20enter%20a%20maze.%20The%20maze's%20pathways%20are%20clear,%20with%20walls%20separating%20the%20routes-1400.webp"/> <img src="/assets/img/reinforce/DALL%C2%B7E%202023-10-24%2015.38.59%20-%20Vector%20design%20of%20a%20playful%20scene%20where%20a%20cartoon%20robot%20is%20gearing%20up%20to%20enter%20a%20maze.%20The%20maze's%20pathways%20are%20clear,%20with%20walls%20separating%20the%20routes.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Figure 1. Illustration of an agent (robot) tries to reach the cheese as soon as possible (Image source : DALLE-3). </div> <p>The agent follows a “policy” \(\pi(a \mid s)\), which tells it what action \(a\) to take when in state \(s\). This policy is controlled by some parameters \(\theta\), which we adjust to make the policy better. Here are the more formal definitions of important terms in RL:</p> <ul> <li> <p><strong>Environment</strong>: The space or setting in which the agent operates.</p> </li> <li> <p><strong>State</strong>: The condition of the environment at a given time point, often denoted as \(s\) or \(s_t\) to indicate its time-dependence.</p> </li> <li> <p><strong>Agent</strong>: An entity that observes the state of the environment and takes actions to achieve a specific objective.</p> </li> <li> <p><strong>Action</strong>: A specific operation that an agent can execute, typically denoted by \(a\) or \(a_t\).</p> </li> <li> <p><strong>Policy</strong>: A policy, denoted by \(\pi(a \mid s)\) or \(\pi(s, a)\), is a mapping from states to actions, or to probabilities of selecting each action.</p> </li> <li> <p><strong>Reward</strong>: A scalar value, often denoted by \(r\) or \(r_t\), that the environment returns in response to the agent’s action.</p> </li> </ul> <h2 id="the-problem-with-traditional-methods">The Problem with Traditional Methods</h2> <p>In RL, we often want a computer to learn how to make decisions by itself. For instance, imagine a game where a robot must find its way out of a maze. The robot learns by trying different paths and seeing which ones get it out of the maze faster. It sounds simple right? But what if the maze is large and complicated? Then the number of decisions the robot must make becomes huge. This is where function approximators like neural networks come into play, they can help the robot to generalize from its experience to make better decisions.</p> <p>For a long time, people used something called a “value-function approach” to do this. In this approach, all the effort is put into calculating a value for each decision or “action” the robot can make. The robot then chooses the action with the highest value. However, this approach has some downsides:</p> <ul> <li> <p><strong>Deterministic Policies</strong>: The traditional method is good for making a fixed decision, but sometimes we want the robot to be a bit random. Why? Because the best decision can depend on chance or unknown factors.</p> </li> <li> <p><strong>Sensitive Choices</strong>: A tiny change in the calculated value can dramatically change the action taken by the robot. This is risky because we want the robot to learn stable behavior.</p> </li> <li> <p><strong>Convergence Issues</strong>: This simply means that using the value-function approach does not always guarantee that the robot will find the best way to act in all situations.</p> </li> </ul> <h2 id="the-policy-gradient-theorem">The Policy Gradient Theorem</h2> <p>Before we delve into the details of REINFORCE algorithm, we need to understand what policy gradient really is and why it can be a game-changer in the world of RL. The reason for this is that REINFORCE itself belongs to this approach. Unlike traditional value-based methods which assess the “goodness” of states or state-action pairs, policy gradients aim to directly optimize the policy. Let’s take a look at what kind of potential problems this approach has and how policy gradient methods can avoid those issues:</p> <ul> <li> <p><strong>Curse of Dimensionality</strong>: Value-based methods require an estimated value for every possible state or state-action pair. As the number of states and actions increases, the size of the value function grows exponentially. By focusing directly on optimizing the policy, policy gradient methods can avoid this issue since it works with a much smaller set of parameters.</p> </li> <li> <p><strong>Non-Markovian Environments</strong>: In some cases, the environment is not following the Markov Property, where the future state depends only on the current state and action. Policy gradient methods do not rely on the Markov property because they do not predict future values; they only need to evaluate the outcomes of current actions.</p> </li> <li> <p><strong>Exploration vs. Exploitation</strong>: Value-based methods often cause the agent to stick to known high-value states and actions, missing out on potentially better options. By adjusting the policy parameters, policy gradient methods can encourage the agent to explore different actions with probabilities, rather than committing to the action with the highest estimated value.</p> </li> </ul> <p>In other words, the key difference is that the size of the parameter set in policy gradient methods is determined by the complexity of the policy representation (e.g., the architecture of the neural network), not by the size of the state or action space.</p> <p>For example, suppose you have a neural network with 1000 parameters. It can still process thousands or even millions of different states and output actions for each of them because the same parameters are used to evaluate every state through the network’s forward pass. This means that even for complex environments, the number of parameters doesn’t necessarily increase with the complexity of the state space, which is often the case with value-based methods.</p> <p>Thus, policy gradient methods are particularly well-suited for high-dimensional or continuous action spaces, can naturally accommodate stochastic policies, and are less sensitive to the challenges associated with value function approximation.</p> <h3 id="the-formal-objective">The Formal Objective</h3> <p>The objective is to maximize the expected return \(J(\theta)\), defined as the average sum of rewards an agent can expect to receive while following a specific policy \(\pi\).</p> \[\max_{\theta} \mathbb{E}_{\tau \sim \pi_{\theta}}\left[\sum_{t=0}^{T-1} \gamma^{t} r_{t}\right]\] <p>In this equation, \(\gamma\) is the discount factor, \(\theta\) are the parameters governing the policy \(\pi\), and \(T\) is the time horizon.</p> <h3 id="the-policy-gradient-theorem-in-detail">The Policy Gradient Theorem in Detail</h3> <p>To find the maximum of this objective function, we need its gradient w.r.t \(\theta\). The Policy Gradient Theorem provides this invaluable piece of information. Formally, it is expressed as:</p> \[\frac{\partial J(\theta)}{\partial \theta} = \sum_{s} d^{\pi}(s) \sum_{a} \frac{\partial \pi(a \mid s)}{\partial \theta} Q^{\pi}(s, a)\] <p>Here, \(d^{\pi}(s)\) represents the stationary distribution of states when following policy \(\pi\), and \(Q^{\pi}(s, a)\) is the expected return of taking action \(a\) in state \(s\) while following \(\pi\).</p> <p>This equation essentially tells us how a change in \(\theta\) will influence the expected return \(J(\theta)\).</p> <h3 id="the-log-derivative-trick">The Log-Derivative Trick</h3> <p>For effective computation of the gradient, the log-derivative trick is often employed. It allows us to express the derivative of the policy with respect to its parameters \(\theta\) in a simpler form. The trick is based on the identity:</p> \[\nabla_{\theta} \pi(a \mid s) = \pi(a \mid s) \nabla_{\theta} \log \pi(a \mid s)\] <p>This identity is derived from the property of logarithms that the derivative of the log of a function is the derivative of the function divided by the function itself:</p> \[\nabla_{\theta} \log \pi(a \mid s) = \frac{\nabla_{\theta} \pi(a \mid s)}{\pi(a \mid s)}\] <p>Therefore, multiplying both sides by \(\pi(a \mid s)\), we get:</p> \[\nabla_{\theta} \pi(a \mid s) = \pi(a \mid s) \nabla_{\theta} \log \pi(a \mid s)\] <h3 id="the-role-of-log-derivative-trick">The Role of Log-Derivative Trick</h3> <p>Now, let’s see how this trick fits into the policy gradient equation. When we substitute \(\nabla_{\theta} \pi(a \mid s)\) using the log-derivative trick into the Policy Gradient Theorem, we get:</p> \[\frac{\partial J(\theta)}{\partial \theta} = \sum_{s} d^{\pi}(s) \sum_{a} \pi(a \mid s) \nabla_{\theta} \log \pi(a \mid s) Q^{\pi}(s, a)\] <p>The sum over states and actions weighted by the state distribution \(d^{\pi}(s)\) and the policy \(\pi(a \mid s)\) can be seen as an expectation. This is because the expectation of a random variable is the sum of the possible values of the random variable weighted by their probabilities which in this case is the product of \(d^{\pi}(s)\) and \(\pi(a \mid s)\). Thus, we can rewrite the above sum as:</p> \[\frac{\partial J(\theta)}{\partial \theta} = \mathbb{E}_{\tau \sim \pi_{\theta}} \left[ \sum_{t=0}^{T-1} \nabla_{\theta} \log \pi_{\theta}(a_t \mid s_t) Q^{\pi}(s_t, a_t) \right]\] <p>Here, \(\mathbb{E}_{\tau \sim \pi_{\theta}}\) denotes the expected value when the trajectory \(\tau\) (a sequence of states and actions) is sampled according to the policy \(\pi\) parameterized by \(\theta\). This form is computationally more convenient because we can estimate the expectation by sampling trajectories and calculating the average over them, which become an unbiased estimator for that expectation. We will use this in the REINFORCE algorithm.</p> <h2 id="introducing-reinforce-algorithm">Introducing REINFORCE Algorithm</h2> <p>After understanding the power and flexibility of Policy Gradient methods, it’s time to delve into one of its most famous implementations: the REINFORCE algorithm which stands for REward Increment = Nonnegative Factor x Offset Reinforcement x Characteristic Eligibility, this algorithm is often considered as one of the most important and fundamental building block in the world of Reinforcement Learning.</p> <h3 id="main-idea-of-reinforce">Main Idea of REINFORCE</h3> <p>The core idea of REINFORCE that differentiate it with other methods is in its utilization of Monte Carlo methods to estimate the gradients needed for policy optimization. By taking sample paths through the state and action space, REINFORCE avoids the need for a model of the environment and sidesteps the computational bottleneck of calculating the true gradients. This is particularly useful when the state and/or action spaces are large or continuous, making other methods infeasible.</p> <p>For those who are not familiar with Monte Carlo approach, it is basically the process of sampling and averaging for estimating expected values in situations with large or infinite state spaces. By doing this, we can get the estimates that are unbiased without incorporating all available data.</p> <p>For better understanding, imagine we have a standard six-sided dice, and we want to estimate the expected value of a roll. The true expected value, \(E(X)\), for a fair dice roll is the average of all possible outcomes:</p> \[E(X) = \frac{1 + 2 + 3 + 4 + 5 + 6}{6} = 3.5\] <p>However, suppose we don’t know this formula or we are dealing with a more complex system where the expected value isn’t straightforward to calculate. This is where Monte Carlo estimation comes into play.</p> <p>Let’s say we perform a series of dice rolls and record the results after each roll. We’ll then calculate the cumulative average after each roll and see how this average converges to the true expected value of 3.5 as we increase the number of rolls.</p> <div class="row mt-4"> <div class="col-12 col-lg mt-4 img-container"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/reinforce/graph_montecarlo_sample-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/reinforce/graph_montecarlo_sample-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/reinforce/graph_montecarlo_sample-1400.webp"/> <img src="/assets/img/reinforce/graph_montecarlo_sample.jpg" class="img-fluid" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption text-center mb-4"> Figure 2. Convergence plot for dice rolls when we increase number of samples. </div> <p>In the plot above, you can observe the cumulative average of the dice rolls as the number of rolls increases. This line represents the average of the rolled numbers after each roll. The red dashed line marks the true expected value of a fair die roll, which is 3,5. As you can see, if we take enough samples, then it will give us similar result as the true expected value of that roll. This example demonstrates that taking enough sampling can lead us to have results that are close enough to the true expected value.</p> <p>To understand more about the role of Monte Carlo in the REINFORCE, see the explanation below.</p> <h3 id="reinforce--policy-gradient-theorem">REINFORCE &amp; Policy Gradient Theorem</h3> <p>Recall that the Policy Gradient Theorem provides an expression for the gradient of the expected return with respect to the policy parameters. REINFORCE directly employs this theorem but takes it a step further by providing a practical way to estimate this gradient through sampling. The mathematical equation for obtaining expected return \(J(\theta)\) using this theorem can be written as:</p> \[\nabla J(\theta) = \mathbb{E}_{\tau \sim \pi_{\theta}} \left[ \sum_{t=0}^{T-1} \nabla_{\theta} \log \pi_{\theta}(a_t \mid s_t) Q^{\pi}(s_t, a_t) \right]\] <p>REINFORCE simplifies this expression by utilizing the Monte Carlo estimate for \(Q^{\pi}(s_t, a_t)\), which is the sampled return \(G_t\):</p> \[\nabla J(\theta) = \mathbb{E}_{\tau \sim \pi_{\theta}} \left[ \sum_{t=0}^{T-1} \nabla_{\theta} \log \pi_{\theta}(a_t \mid s_t) G_t \right]\] <p>Here, \(G_t\) is the return obtained using a Monte Carlo estimate, providing a sample-based approximation of \(Q^{\pi}(s_t, a_t)\).</p> <p>In essence, REINFORCE is a concrete implementation of the Policy Gradient method that uses Monte Carlo sampling to estimate the otherwise intractable or unknown quantities in the Policy Gradient Theorem. By doing so, it provides a computationally efficient, model-free method to optimize policies in complex environments.</p> <h3 id="mathematical-details-of-reinforce">Mathematical Details of REINFORCE</h3> <p>The REINFORCE algorithm can be understood through a sequence of mathematical steps, which are as follows:</p> <ol> <li> <p><strong>Initialize Policy Parameters</strong>: Randomly initialize the policy parameters \(\theta\).</p> </li> <li> <p><strong>Generate Episode</strong>: Using the current policy \(\pi_\theta\), generate an episode \(S_1, A_1, R_2, \ldots, S_T\).</p> </li> <li><strong>Compute Gradients</strong>: For each step \(t\) in the episode, <ul> <li>Compute the return \(G_t\).</li> <li>Compute the policy gradient \(\Delta \theta_t = \alpha \gamma^t G_t \nabla_\theta \log \pi_{\theta}(a_t \mid s_t)\).</li> </ul> </li> <li><strong>Update Policy</strong>: Update the policy parameters \(\theta\) using \(\Delta \theta\).</li> </ol> <p>The key equation that governs this update is:</p> \[\nabla J(\theta) = \mathbb{E}_{\tau \sim \pi_{\theta}} \left[ \sum_{t=0}^{T-1} \nabla_\theta \log \pi_{\theta}(a_t \mid s_t) G_t \right]\] <h3 id="conclusion-and-limitations">Conclusion and Limitations</h3> <p>While REINFORCE is oftenly used for its simplicity and directness, it’s also essential to recognize its limitations. The method tends to have high variance in its gradient estimates, which could lead to unstable training. However, various techniques, like using a baseline or employing advanced variance reduction methods, can alleviate these issues to some extent.</p> <p>REINFORCE is often the easy choice when you need a simple yet effective method for policy optimization, especially in high-dimensional or continuous action spaces.</p>]]></content><author><name></name></author><category term="blogpost"/><category term="Reinforcement"/><category term="Learning"/><category term="(RL),"/><category term="REINFORCE,"/><category term="Policy"/><category term="Gradient"/><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">What are JAX and Flax? Why those Deep Learning Frameworks can be Very Important?</title><link href="ravialdy/ravialdy.github.io/blog/2023/jaxflax/" rel="alternate" type="text/html" title="What are JAX and Flax? Why those Deep Learning Frameworks can be Very Important?"/><published>2023-10-05T13:56:00+00:00</published><updated>2023-10-05T13:56:00+00:00</updated><id>ravialdy/ravialdy.github.io/blog/2023/jaxflax</id><content type="html" xml:base="ravialdy/ravialdy.github.io/blog/2023/jaxflax/"><![CDATA[<h1 id="understanding-jax-and-flax">Understanding JAX and Flax!</h1> <p>Hello, everyone! Today, we will learn about two powerful tools for machine learning: JAX and Flax. These frameworks can be much faster than the common ones, such as Pytorch and Tensorflow. JAX helps us with fast math calculations, and Flax makes it easier to build neural networks. We’ll use both to make a simple image classifier for handwritten digits.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/jax-flax1-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/jax-flax1-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/jax-flax1-1400.webp"/> <img src="/assets/img/jax-flax1.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Figure 1. JAX vs. Tensorflow Speed Performance on Simple MNIST Image Classification Dataset </div> <h2 id="table-of-contents">Table of Contents</h2> <ol> <li><a href="#introduction">Introduction</a> <ul> <li><a href="#whats-the-issue-with-existing-frameworks">Issues with Existing Frameworks</a></li> </ul> </li> <li><a href="#so,-why-using-jax-and-flax">So, Why Using JAX and Flax?</a> <ul> <li><a href="#so-what-is-just-in-time-compilation">What is Just-In-Time Compilation?</a></li> <li><a href="#why-flax">Why Flax?</a></li> </ul> </li> <li><a href="#what-youll-learn">What You’ll Learn</a> <ul> <li><a href="#what-is-jax">JAX Explained</a></li> <li><a href="#what-is-flax">Flax Explained</a></li> </ul> </li> <li><a href="#jax-and-flax-w-mnist-image-classification">JAX and Flax Implementation w/ MNIST Image Classification</a></li> </ol> <h2 id="introduction">Introduction</h2> <p>Before diving into the technical details, let’s discuss why we even need frameworks like JAX and Flax when we already have powerful libraries like PyTorch and TensorFlow.</p> <h3 id="whats-the-issue-with-existing-frameworks">What’s the Issue with Existing Frameworks?</h3> <p>Don’t get me wrong—PyTorch and TensorFlow are great. They are versatile, powerful, and have huge communities. However, they can be a bit rigid for some research needs:</p> <ul> <li><strong>Not So Easy to Customize</strong>: If you need to modify the behavior of the training loop or gradient calculations, you might find it challenging.</li> <li><strong>Debugging</strong>: Debugging can be hard, especially when computation graphs become complex.</li> </ul> <h2 id="so-why-using-jax-and-flax">So, Why Using JAX and Flax?</h2> <p>JAX is like NumPy which means that JAX’s features is its NumPy-compatible API allowing for easy transition from NumPy to JAX for numerical operations, but supercharged:</p> <ul> <li><strong>Flexibility</strong>: JAX is functional and allows for more fine-grained control, making it highly customizable.</li> <li><strong>Performance</strong>: With its just-in-time compilation, JAX can optimize your code for high-speed numerical computing.</li> </ul> <p>In many cases, it would make sense to use jax.numpy (often imported as jnp) instead of ordinary NumPy to take advantage of JAX’s features like automatic differentiation and GPU acceleration.</p> <h3 id="why-flax">Why Flax?</h3> <p>Flax is like the cherry on top of JAX:</p> <ul> <li><strong>Simplicity</strong>: Building neural networks becomes straightforward.</li> <li><strong>Extendable</strong>: Designed with research in mind, you can easily add unconventional elements to your network or training loop.</li> </ul> <h2 id="what-youll-learn">What You’ll Learn</h2> <ul> <li>What are JAX and Flax?</li> <li>How to install them</li> <li>Building a simple CNN model for MNIST image classification</li> </ul> <h3 id="what-is-jax">What is JAX?</h3> <p>JAX is a library that helps us do fast numerical operations. It can automatically make our code run faster and allows us to use the GPU easily by utilizing Just-In-Time (JIT) Compilation. It is widely used in research for its flexibility and speed.</p> <h3 id="so-what-is-just-in-time-compilation">So, what is Just-In-Time Compilation?</h3> <p>Imagine you’re a chef, and you have a recipe (your code). Traditional Python executes this recipe step-by-step, which is time-consuming. JIT compilation is like having an assistant chef who learns from watching you and then can perform the entire recipe in a much more optimized manner. This is particularly beneficial for repetitive tasks like the training loops in machine learning models.</p> <p>In my experience, after applying JIT compilation properly, JAX outperformed TensorFlow and Pytorch in training speed, making it highly efficient for machine learning tasks. While JAX is powerful, it also requires careful coding practices. For example, to make full use of JIT compilation, it is crucial to avoid changing the code inside the training loop to prevent re-compilation, which can slow down the training process. Once you grasp these nuances, harnessing JAX’s full power becomes straightforward.</p> <h3 id="what-is-flax">What is Flax?</h3> <p>Flax is built on top of JAX and provides a simple way to build and train neural networks. It is designed to be flexible, making it a good choice for research projects.</p> <h2 id="jax-and-flax-w-mnist-image-classification">JAX and Flax w/ MNIST Image Classification</h2> <p>Let’s go into simple practical implementation on MNIST dataset. Before you build a skyscraper, you need to know how to make a small house. The same goes for machine learning. Understanding how to build a simple image classifier can give you the foundation you need to tackle more complex problems later. MNIST Image Classification is a simple but fundamental task in machine learning. It gives us a perfect playground to explore JAX and Flax without getting lost in the complexity of the task itself.</p> <h3 id="installing-jax-and-flax">Installing JAX and Flax</h3> <p>First, let’s install JAX and Flax. Open your terminal and run:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install</span> <span class="nt">--upgrade</span> jax jaxlib
pip <span class="nb">install </span>flax
</code></pre></div></div> <h3 id="import-libraries">Import Libraries</h3> <p>Let’s import all the libraries we need.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">jax</span>
<span class="kn">import</span> <span class="n">flax</span>
<span class="kn">import</span> <span class="n">jax.numpy</span> <span class="k">as</span> <span class="n">jnp</span>
<span class="kn">from</span> <span class="n">flax</span> <span class="kn">import</span> <span class="n">linen</span> <span class="k">as</span> <span class="n">nn</span>
<span class="kn">from</span> <span class="n">jax</span> <span class="kn">import</span> <span class="n">random</span>
<span class="kn">from</span> <span class="n">tensorflow.keras</span> <span class="kn">import</span> <span class="n">datasets</span>
</code></pre></div></div> <h3 id="prepare-the-data">Prepare the Data</h3> <p>We’ll use the MNIST dataset, which is a set of 28x28 grayscale images of handwritten digits. We normalize the images by dividing by 255, as this scales the pixel values between 0 and 1, which generally helps the model to learn more efficiently.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="n">train_images</span><span class="p">,</span> <span class="n">train_labels</span><span class="p">),</span> <span class="p">(</span><span class="n">test_images</span><span class="p">,</span> <span class="n">test_labels</span><span class="p">)</span> <span class="o">=</span> <span class="n">datasets</span><span class="p">.</span><span class="n">mnist</span><span class="p">.</span><span class="nf">load_data</span><span class="p">()</span>

<span class="c1"># Normalize and reshape the data using JAX's NumPy
</span><span class="n">train_images</span> <span class="o">=</span> <span class="n">jnp</span><span class="p">.</span><span class="nf">expand_dims</span><span class="p">(</span><span class="n">train_images</span> <span class="o">/</span> <span class="mf">255.0</span><span class="p">,</span> <span class="n">axis</span><span class="o">=-</span><span class="mi">1</span><span class="p">).</span><span class="nf">astype</span><span class="p">(</span><span class="n">jnp</span><span class="p">.</span><span class="n">float32</span><span class="p">)</span>
<span class="n">test_images</span> <span class="o">=</span> <span class="n">jnp</span><span class="p">.</span><span class="nf">expand_dims</span><span class="p">(</span><span class="n">test_images</span> <span class="o">/</span> <span class="mf">255.0</span><span class="p">,</span> <span class="n">axis</span><span class="o">=-</span><span class="mi">1</span><span class="p">).</span><span class="nf">astype</span><span class="p">(</span><span class="n">jnp</span><span class="p">.</span><span class="n">float32</span><span class="p">)</span>
</code></pre></div></div> <h3 id="create-the-model">Create the Model</h3> <p>Now let’s build a simple Convolutional Neural Network (CNN) using Flax.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Define the CNN model using Flax
</span><span class="k">class</span> <span class="nc">CNN</span><span class="p">(</span><span class="n">nn</span><span class="p">.</span><span class="n">Module</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">
    A simple CNN model for MNIST classification.
    </span><span class="sh">"""</span>
    <span class="nd">@nn.compact</span>
    <span class="k">def</span> <span class="nf">__call__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">x</span><span class="p">:</span> <span class="n">jnp</span><span class="p">.</span><span class="n">ndarray</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">jnp</span><span class="p">.</span><span class="n">ndarray</span><span class="p">:</span>
        <span class="n">x</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="nc">Conv</span><span class="p">(</span><span class="n">features</span><span class="o">=</span><span class="mi">32</span><span class="p">,</span> <span class="n">kernel_size</span><span class="o">=</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">))(</span><span class="n">x</span><span class="p">)</span>
        <span class="n">x</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="nf">relu</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
        <span class="n">x</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="nf">avg_pool</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">window_shape</span><span class="o">=</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="n">strides</span><span class="o">=</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>
        <span class="n">x</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="nc">Conv</span><span class="p">(</span><span class="n">features</span><span class="o">=</span><span class="mi">64</span><span class="p">,</span> <span class="n">kernel_size</span><span class="o">=</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">))(</span><span class="n">x</span><span class="p">)</span>
        <span class="n">x</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="nf">relu</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
        <span class="n">x</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="nf">avg_pool</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">window_shape</span><span class="o">=</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="n">strides</span><span class="o">=</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>
        <span class="n">x</span> <span class="o">=</span> <span class="n">x</span><span class="p">.</span><span class="nf">reshape</span><span class="p">((</span><span class="n">x</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="o">-</span><span class="mi">1</span><span class="p">))</span>
        <span class="n">x</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="nc">Dense</span><span class="p">(</span><span class="n">features</span><span class="o">=</span><span class="mi">256</span><span class="p">)(</span><span class="n">x</span><span class="p">)</span>
        <span class="n">x</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="nf">relu</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
        <span class="n">x</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="nc">Dense</span><span class="p">(</span><span class="n">features</span><span class="o">=</span><span class="mi">10</span><span class="p">)(</span><span class="n">x</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">nn</span><span class="p">.</span><span class="nf">log_softmax</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</code></pre></div></div> <h3 id="initialize-the-model">Initialize the Model</h3> <p>Before using our model, we need to initialize it. Initialization is crucial because it sets the initial random weights of the model, which will be updated during training.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">key</span> <span class="o">=</span> <span class="n">random</span><span class="p">.</span><span class="nc">PRNGKey</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="n">model</span> <span class="o">=</span> <span class="nc">CNN</span><span class="p">()</span>
<span class="n">x</span> <span class="o">=</span> <span class="n">jnp</span><span class="p">.</span><span class="nf">ones</span><span class="p">((</span><span class="mi">1</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="n">jnp</span><span class="p">.</span><span class="n">float32</span><span class="p">)</span>
<span class="n">params</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="nf">init</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</code></pre></div></div> <h3 id="training">Training</h3> <p>Now, let’s train the model. But first, let’s initialize the optimizer. We will use the Adam optimizer provided by Optax. Optax is a flexible and extensible optimization library that provides a wide range of optimization algorithms.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Initialize the optimizer
</span><span class="kn">import</span> <span class="n">optax</span>
<span class="n">optimizer</span> <span class="o">=</span> <span class="n">optax</span><span class="p">.</span><span class="nf">adam</span><span class="p">(</span><span class="mf">0.001</span><span class="p">)</span>
<span class="n">opt_state</span> <span class="o">=</span> <span class="n">optimizer</span><span class="p">.</span><span class="nf">init</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</code></pre></div></div> <p>We won’t go into detail about training loops here, but you can use JAX’s <code class="language-plaintext highlighter-rouge">grad</code> function to compute gradients and update the model weights. We use JAX’s <code class="language-plaintext highlighter-rouge">jit</code> function to compile the <code class="language-plaintext highlighter-rouge">train_step</code> function, speeding up our training loop. Just-In-Time (JIT) compilation improves the performance by compiling Python functions to optimized machine code at runtime.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">jax</span> <span class="kn">import</span> <span class="n">grad</span><span class="p">,</span> <span class="n">jit</span><span class="p">,</span> <span class="n">value_and_grad</span>
<span class="kn">from</span> <span class="n">jax.scipy.special</span> <span class="kn">import</span> <span class="n">logsumexp</span>

<span class="k">def</span> <span class="nf">loss_fn</span><span class="p">(</span><span class="n">params</span><span class="p">:</span> <span class="nb">dict</span><span class="p">,</span> <span class="n">images</span><span class="p">:</span> <span class="n">jnp</span><span class="p">.</span><span class="n">ndarray</span><span class="p">,</span> <span class="n">labels</span><span class="p">:</span> <span class="n">jnp</span><span class="p">.</span><span class="n">ndarray</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">float</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    Computes the loss between the predicted labels and true labels.
    </span><span class="sh">"""</span>
    <span class="n">logits</span> <span class="o">=</span> <span class="nc">CNN</span><span class="p">().</span><span class="nf">apply</span><span class="p">(</span><span class="n">params</span><span class="p">,</span> <span class="n">images</span><span class="p">)</span>
    <span class="n">logprobs</span> <span class="o">=</span> <span class="n">logits</span> <span class="o">-</span> <span class="nf">logsumexp</span><span class="p">(</span><span class="n">logits</span><span class="p">,</span> <span class="n">axis</span><span class="o">=-</span><span class="mi">1</span><span class="p">,</span> <span class="n">keepdims</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="k">return</span> <span class="o">-</span><span class="n">jnp</span><span class="p">.</span><span class="nf">mean</span><span class="p">(</span><span class="n">jnp</span><span class="p">.</span><span class="nf">sum</span><span class="p">(</span><span class="n">logprobs</span> <span class="o">*</span> <span class="n">labels</span><span class="p">,</span> <span class="n">axis</span><span class="o">=-</span><span class="mi">1</span><span class="p">))</span>

<span class="nd">@jit</span>
<span class="k">def</span> <span class="nf">train_step</span><span class="p">(</span><span class="n">opt_state</span><span class="p">:</span> <span class="n">optax</span><span class="p">.</span><span class="n">OptState</span><span class="p">,</span> <span class="n">params</span><span class="p">:</span> <span class="nb">dict</span><span class="p">,</span> <span class="n">images</span><span class="p">:</span> <span class="n">jnp</span><span class="p">.</span><span class="n">ndarray</span><span class="p">,</span> <span class="n">labels</span><span class="p">:</span> <span class="n">jnp</span><span class="p">.</span><span class="n">ndarray</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">tuple</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    Performs a single training step.
    </span><span class="sh">"""</span>
    <span class="n">loss</span><span class="p">,</span> <span class="n">grads</span> <span class="o">=</span> <span class="nf">value_and_grad</span><span class="p">(</span><span class="n">loss_fn</span><span class="p">)(</span><span class="n">params</span><span class="p">,</span> <span class="n">images</span><span class="p">,</span> <span class="n">labels</span><span class="p">)</span>
    <span class="n">updates</span><span class="p">,</span> <span class="n">new_opt_state</span> <span class="o">=</span> <span class="n">optimizer</span><span class="p">.</span><span class="nf">update</span><span class="p">(</span><span class="n">grads</span><span class="p">,</span> <span class="n">opt_state</span><span class="p">)</span>
    <span class="n">new_params</span> <span class="o">=</span> <span class="n">optax</span><span class="p">.</span><span class="nf">apply_updates</span><span class="p">(</span><span class="n">params</span><span class="p">,</span> <span class="n">updates</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">new_opt_state</span><span class="p">,</span> <span class="n">new_params</span><span class="p">,</span> <span class="n">loss</span>
</code></pre></div></div> <h3 id="pre-compiling-functions-for-faster-execution">Pre-Compiling Functions for Faster Execution</h3> <p>You might have noticed a somewhat unusual block of code right before our training loop:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Pre-compile functions
# Use a small subset of data to trigger JIT compilation
</span><span class="n">sample_images</span> <span class="o">=</span> <span class="n">jnp</span><span class="p">.</span><span class="nf">ones</span><span class="p">((</span><span class="mi">1</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="n">jnp</span><span class="p">.</span><span class="n">float32</span><span class="p">)</span>
<span class="n">sample_labels</span> <span class="o">=</span> <span class="n">jnp</span><span class="p">.</span><span class="nf">zeros</span><span class="p">((</span><span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">),</span> <span class="n">jnp</span><span class="p">.</span><span class="n">float32</span><span class="p">)</span>
<span class="n">jit_loss_fn</span> <span class="o">=</span> <span class="nf">jit</span><span class="p">(</span><span class="n">loss_fn</span><span class="p">)</span>
<span class="n">jit_train_step</span> <span class="o">=</span> <span class="nf">jit</span><span class="p">(</span><span class="n">train_step</span><span class="p">)</span>

<span class="c1"># Trigger JIT compilation
</span><span class="n">_</span> <span class="o">=</span> <span class="nf">jit_loss_fn</span><span class="p">(</span><span class="n">params</span><span class="p">,</span> <span class="n">sample_images</span><span class="p">,</span> <span class="n">sample_labels</span><span class="p">)</span>
<span class="n">_</span> <span class="o">=</span> <span class="nf">jit_train_step</span><span class="p">(</span><span class="n">opt_state</span><span class="p">,</span> <span class="n">params</span><span class="p">,</span> <span class="n">sample_images</span><span class="p">,</span> <span class="n">sample_labels</span><span class="p">)</span>
</code></pre></div></div> <p>What’s going on with the code above? This block of code is a technique to “warm up” or pre-compile our JAX functions, so they run faster during our training loop.</p> <p>Small Subset of Data: We create a small subset of dummy data, sample_images and sample_labels, that matches the shape and type of our real data. JIT Compilation: We then use JAX’s jit function to indicate that loss_fn and train_step should be JIT compiled. Trigger Compilation: Finally, we run these JIT-compiled functions once using our dummy data. This step is crucial as it triggers the JIT compilation process, converting our Python functions into highly optimized machine code.</p> <h3 id="why-do-we-need-this">Why Do We Need This?</h3> <p>JAX uses Just-In-Time (JIT) compilation to optimize our code. JIT compilation works by looking at the operations in our functions and creating an optimized version of these functions. However, JIT compilation itself takes time. By pre-compiling, we do this step before entering our training loop, ensuring that our code runs at maximum speed when it matters the most.</p> <p>This pre-compilation step is particularly helpful in scenarios where the training loop has to run multiple times, helping us save time in the long run.</p> <p>Next, let’s divide the training data into training and validation sets:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">sklearn.model_selection</span> <span class="kn">import</span> <span class="n">train_test_split</span>

<span class="c1"># Split the training data into training and validation sets
</span><span class="n">train_images</span><span class="p">,</span> <span class="n">val_images</span><span class="p">,</span> <span class="n">train_labels</span><span class="p">,</span> <span class="n">val_labels</span> <span class="o">=</span> <span class="nf">train_test_split</span><span class="p">(</span><span class="n">train_images</span><span class="p">,</span> <span class="n">train_labels</span><span class="p">,</span> <span class="n">test_size</span><span class="o">=</span><span class="mf">0.2</span><span class="p">,</span> <span class="n">random_state</span><span class="o">=</span><span class="mi">42</span><span class="p">)</span>

<span class="c1"># One-hot encode labels
</span><span class="n">train_labels_onehot</span> <span class="o">=</span> <span class="n">jax</span><span class="p">.</span><span class="n">nn</span><span class="p">.</span><span class="nf">one_hot</span><span class="p">(</span><span class="n">train_labels</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
<span class="n">val_labels_onehot</span> <span class="o">=</span> <span class="n">jax</span><span class="p">.</span><span class="n">nn</span><span class="p">.</span><span class="nf">one_hot</span><span class="p">(</span><span class="n">val_labels</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
</code></pre></div></div> <p>Now we can write the training loop.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">pickle</span>
<span class="kn">import</span> <span class="n">time</span>

<span class="n">start_time</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>

<span class="c1"># Initialize variables to keep track of best model and performance
</span><span class="n">best_val_loss</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="sh">'</span><span class="s">inf</span><span class="sh">'</span><span class="p">)</span>
<span class="n">best_params</span> <span class="o">=</span> <span class="bp">None</span>

<span class="c1"># Lists to keep track of loss values for plotting
</span><span class="n">train_losses</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">val_losses</span> <span class="o">=</span> <span class="p">[]</span>

<span class="k">for</span> <span class="n">epoch</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">num_epochs</span><span class="p">):</span>
    <span class="c1"># Training loop
</span>    <span class="n">train_loss_epoch</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">train_images</span><span class="p">),</span> <span class="n">batch_size</span><span class="p">):</span>
        <span class="n">batch_images</span> <span class="o">=</span> <span class="n">jnp</span><span class="p">.</span><span class="nf">array</span><span class="p">(</span><span class="n">train_images</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span> <span class="o">+</span> <span class="n">batch_size</span><span class="p">])</span>
        <span class="n">batch_labels</span> <span class="o">=</span> <span class="n">jnp</span><span class="p">.</span><span class="nf">array</span><span class="p">(</span><span class="n">train_labels_onehot</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span> <span class="o">+</span> <span class="n">batch_size</span><span class="p">])</span>
        <span class="n">opt_state</span><span class="p">,</span> <span class="n">params</span><span class="p">,</span> <span class="n">loss</span> <span class="o">=</span> <span class="nf">train_step</span><span class="p">(</span><span class="n">opt_state</span><span class="p">,</span> <span class="n">params</span><span class="p">,</span> <span class="n">batch_images</span><span class="p">,</span> <span class="n">batch_labels</span><span class="p">)</span>
        <span class="n">train_loss_epoch</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">loss</span><span class="p">)</span>
    
    <span class="n">avg_train_loss</span> <span class="o">=</span> <span class="n">jnp</span><span class="p">.</span><span class="nf">mean</span><span class="p">(</span><span class="n">jnp</span><span class="p">.</span><span class="nf">array</span><span class="p">(</span><span class="n">train_loss_epoch</span><span class="p">))</span>
    <span class="n">train_losses</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">avg_train_loss</span><span class="p">)</span>

    <span class="c1"># Validation loop
</span>    <span class="n">val_loss_epoch</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">val_images</span><span class="p">),</span> <span class="n">batch_size</span><span class="p">):</span>
        <span class="n">batch_images</span> <span class="o">=</span> <span class="n">jnp</span><span class="p">.</span><span class="nf">array</span><span class="p">(</span><span class="n">val_images</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span> <span class="o">+</span> <span class="n">batch_size</span><span class="p">])</span>
        <span class="n">batch_labels</span> <span class="o">=</span> <span class="n">jnp</span><span class="p">.</span><span class="nf">array</span><span class="p">(</span><span class="n">val_labels_onehot</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span> <span class="o">+</span> <span class="n">batch_size</span><span class="p">])</span>
        <span class="n">val_loss</span> <span class="o">=</span> <span class="nf">loss_fn</span><span class="p">(</span><span class="n">params</span><span class="p">,</span> <span class="n">batch_images</span><span class="p">,</span> <span class="n">batch_labels</span><span class="p">)</span>
        <span class="n">val_loss_epoch</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">val_loss</span><span class="p">)</span>

    <span class="n">avg_val_loss</span> <span class="o">=</span> <span class="n">jnp</span><span class="p">.</span><span class="nf">mean</span><span class="p">(</span><span class="n">jnp</span><span class="p">.</span><span class="nf">array</span><span class="p">(</span><span class="n">val_loss_epoch</span><span class="p">))</span>
    <span class="n">val_losses</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">avg_val_loss</span><span class="p">)</span>
    
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Epoch </span><span class="si">{</span><span class="n">epoch</span> <span class="o">+</span> <span class="mi">1</span><span class="si">}</span><span class="s">, Train Loss: </span><span class="si">{</span><span class="n">avg_train_loss</span><span class="si">}</span><span class="s">, Val Loss: </span><span class="si">{</span><span class="n">avg_val_loss</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>

    <span class="c1"># Save best model
</span>    <span class="k">if</span> <span class="n">avg_val_loss</span> <span class="o">&lt;</span> <span class="n">best_val_loss</span><span class="p">:</span>
        <span class="n">best_val_loss</span> <span class="o">=</span> <span class="n">avg_val_loss</span>
        <span class="n">best_params</span> <span class="o">=</span> <span class="n">params</span>

<span class="c1"># Calculate the training time with JAX
</span><span class="n">end_time</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
<span class="n">jax_training_time</span> <span class="o">=</span> <span class="n">end_time</span> <span class="o">-</span> <span class="n">start_time</span>
<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Training time with JAX: </span><span class="si">{</span><span class="n">jax_training_time</span><span class="si">:</span><span class="p">.</span><span class="mi">4</span><span class="n">f</span><span class="si">}</span><span class="s"> seconds</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># Save the best model parameters to a file
</span><span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="sh">'</span><span class="s">best_model_params.pkl</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">wb</span><span class="sh">'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="n">pickle</span><span class="p">.</span><span class="nf">dump</span><span class="p">(</span><span class="n">best_params</span><span class="p">,</span> <span class="n">f</span><span class="p">)</span>
</code></pre></div></div> <p>Then, we can plot the training and validation loss like below:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">6</span><span class="p">))</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="nf">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">num_epochs</span> <span class="o">+</span> <span class="mi">1</span><span class="p">),</span> <span class="n">train_losses</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="sh">'</span><span class="s">Train Loss</span><span class="sh">'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="nf">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">num_epochs</span> <span class="o">+</span> <span class="mi">1</span><span class="p">),</span> <span class="n">val_losses</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="sh">'</span><span class="s">Validation Loss</span><span class="sh">'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">xlabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Epochs</span><span class="sh">'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">ylabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Loss</span><span class="sh">'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">legend</span><span class="p">()</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div></div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/jax-performance-mnist-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/jax-performance-mnist-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/jax-performance-mnist-1400.webp"/> <img src="/assets/img/jax-performance-mnist.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Figure 2. The plot of training and validation loss using JAX framework on MNIST dataset </div> <p>And that’s it! You’ve built a simple CNN for MNIST digit classification using JAX and Flax. Now, to get the point on why using those frameworks can be really crucial, let’s compare its training time with the training time when using tensorflow. Note that we measured the time taken to train a Convolutional Neural Network (CNN) on the MNIST dataset using both JAX and TensorFlow. For fair comparison, both models have the same architecture and are trained for the same number of epochs and batch size.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">tensorflow</span> <span class="k">as</span> <span class="n">tf</span>
<span class="kn">from</span> <span class="n">tensorflow.keras</span> <span class="kn">import</span> <span class="n">layers</span><span class="p">,</span> <span class="n">models</span>

<span class="c1"># Preparing data
</span><span class="p">(</span><span class="n">train_images</span><span class="p">,</span> <span class="n">train_labels</span><span class="p">),</span> <span class="p">(</span><span class="n">val_images</span><span class="p">,</span> <span class="n">val_labels</span><span class="p">)</span> <span class="o">=</span> <span class="n">datasets</span><span class="p">.</span><span class="n">mnist</span><span class="p">.</span><span class="nf">load_data</span><span class="p">()</span>
<span class="n">train_images</span> <span class="o">=</span> <span class="n">train_images</span><span class="p">.</span><span class="nf">reshape</span><span class="p">((</span><span class="mi">60000</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">1</span><span class="p">)).</span><span class="nf">astype</span><span class="p">(</span><span class="sh">'</span><span class="s">float32</span><span class="sh">'</span><span class="p">)</span> <span class="o">/</span> <span class="mi">255</span>
<span class="n">val_images</span> <span class="o">=</span> <span class="n">val_images</span><span class="p">.</span><span class="nf">reshape</span><span class="p">((</span><span class="mi">10000</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">1</span><span class="p">)).</span><span class="nf">astype</span><span class="p">(</span><span class="sh">'</span><span class="s">float32</span><span class="sh">'</span><span class="p">)</span> <span class="o">/</span> <span class="mi">255</span>

<span class="n">train_labels</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">keras</span><span class="p">.</span><span class="n">utils</span><span class="p">.</span><span class="nf">to_categorical</span><span class="p">(</span><span class="n">train_labels</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
<span class="n">val_labels</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">keras</span><span class="p">.</span><span class="n">utils</span><span class="p">.</span><span class="nf">to_categorical</span><span class="p">(</span><span class="n">val_labels</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>

<span class="c1"># Creating the model
</span><span class="n">model</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="nc">Sequential</span><span class="p">([</span>
    <span class="n">layers</span><span class="p">.</span><span class="nc">Conv2D</span><span class="p">(</span><span class="mi">32</span><span class="p">,</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="n">activation</span><span class="o">=</span><span class="sh">'</span><span class="s">relu</span><span class="sh">'</span><span class="p">,</span> <span class="n">input_shape</span><span class="o">=</span><span class="p">(</span><span class="mi">28</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">1</span><span class="p">)),</span>
    <span class="n">layers</span><span class="p">.</span><span class="nc">AveragePooling2D</span><span class="p">((</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">)),</span>
    <span class="n">layers</span><span class="p">.</span><span class="nc">Conv2D</span><span class="p">(</span><span class="mi">64</span><span class="p">,</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="n">activation</span><span class="o">=</span><span class="sh">'</span><span class="s">relu</span><span class="sh">'</span><span class="p">),</span>
    <span class="n">layers</span><span class="p">.</span><span class="nc">AveragePooling2D</span><span class="p">((</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">)),</span>
    <span class="n">layers</span><span class="p">.</span><span class="nc">Flatten</span><span class="p">(),</span>
    <span class="n">layers</span><span class="p">.</span><span class="nc">Dense</span><span class="p">(</span><span class="mi">256</span><span class="p">,</span> <span class="n">activation</span><span class="o">=</span><span class="sh">'</span><span class="s">relu</span><span class="sh">'</span><span class="p">),</span>
    <span class="n">layers</span><span class="p">.</span><span class="nc">Dense</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="n">activation</span><span class="o">=</span><span class="sh">'</span><span class="s">softmax</span><span class="sh">'</span><span class="p">)</span>
<span class="p">])</span>

<span class="c1"># Compiling the model
</span><span class="n">model</span><span class="p">.</span><span class="nf">compile</span><span class="p">(</span><span class="n">optimizer</span><span class="o">=</span><span class="sh">'</span><span class="s">adam</span><span class="sh">'</span><span class="p">,</span>
              <span class="n">loss</span><span class="o">=</span><span class="sh">'</span><span class="s">categorical_crossentropy</span><span class="sh">'</span><span class="p">,</span>
              <span class="n">metrics</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">accuracy</span><span class="sh">'</span><span class="p">])</span>

<span class="c1"># Measuring time for training
</span><span class="n">start_time</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>

<span class="c1"># Fitting the model
</span><span class="n">history</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span>
    <span class="n">train_images</span><span class="p">,</span> <span class="n">train_labels</span><span class="p">,</span>
    <span class="n">epochs</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span>
    <span class="n">batch_size</span><span class="o">=</span><span class="mi">64</span><span class="p">,</span>
    <span class="n">validation_data</span><span class="o">=</span><span class="p">(</span><span class="n">val_images</span><span class="p">,</span> <span class="n">val_labels</span><span class="p">)</span>
<span class="p">)</span>

<span class="n">end_time</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>

<span class="n">non_jax_training_time</span> <span class="o">=</span> <span class="n">end_time</span> <span class="o">-</span> <span class="n">start_time</span>

<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Training time without JAX: </span><span class="si">{</span><span class="n">non_jax_training_time</span><span class="si">:</span><span class="p">.</span><span class="mi">4</span><span class="n">f</span><span class="si">}</span><span class="s"> seconds</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div> <p>In machine learning, training time is a crucial factor. Faster training allows for more iterations and experiments, speeding up the development process. Below is a bar graph that shows the training time for each framework.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Labels and corresponding values
</span><span class="n">labels</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">JAX</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">TensorFlow</span><span class="sh">'</span><span class="p">]</span>
<span class="n">times</span> <span class="o">=</span> <span class="p">[</span><span class="n">jax_training_time</span><span class="p">,</span> <span class="n">non_jax_training_time</span><span class="p">]</span>

<span class="c1"># Create the bar chart
</span><span class="n">plt</span><span class="p">.</span><span class="nf">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="mi">6</span><span class="p">))</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">barh</span><span class="p">(</span><span class="n">labels</span><span class="p">,</span> <span class="n">times</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">blue</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">green</span><span class="sh">'</span><span class="p">])</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">xlabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Training Time (seconds)</span><span class="sh">'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="sh">'</span><span class="s">Training Time Comparison: JAX vs TensorFlow</span><span class="sh">'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">grid</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="sh">'</span><span class="s">x</span><span class="sh">'</span><span class="p">)</span>

<span class="c1"># Annotate with the exact times
</span><span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">time</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">times</span><span class="p">):</span>
    <span class="n">plt</span><span class="p">.</span><span class="nf">text</span><span class="p">(</span><span class="n">time</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="sa">f</span><span class="sh">'</span><span class="si">{</span><span class="n">time</span><span class="si">:</span><span class="p">.</span><span class="mi">2</span><span class="n">f</span><span class="si">}</span><span class="s"> s</span><span class="sh">'</span><span class="p">,</span> <span class="n">va</span><span class="o">=</span><span class="sh">'</span><span class="s">center</span><span class="sh">'</span><span class="p">)</span>

<span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div></div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/jax-flax-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/jax-flax-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/jax-flax-1400.webp"/> <img src="/assets/img/jax-flax.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Figure 1. JAX vs. Tensorflow Speed Performance on Simple MNIST Image Classification Dataset </div> <p>As you can see, using JAX in simple dataset like MNIST can increase the speed significantly. You can imagine how fast it is when implementing it in bigger datasets and much more complex tasks!!</p> <h3 id="conclusion">Conclusion</h3> <p>JAX and Flax are powerful tools for machine learning research and projects. JAX provides fast and flexible numerical operations, while Flax offers a simple and extendable way to build neural networks.</p> <p>I hope this post helps you understand the basics of JAX and Flax. Below I also attach runned jupyter notebook about this blogpost. Happy coding!</p> <div class="jupyter-notebook" style="position: relative; width: 100%; margin: 0 auto;"> <div class="jupyter-notebook-iframe-container"> <iframe src="/assets/jupyter/Jax_and_Flax_Intro.ipynb.html" style="position: absolute; top: 0; left: 0; border-style: none;" width="100%" height="100%" onload="this.parentElement.style.paddingBottom = (this.contentWindow.document.documentElement.scrollHeight + 10) + 'px'"></iframe> </div> </div>]]></content><author><name></name></author><category term="blogpost"/><category term="JAX,"/><category term="Flax,"/><category term="Deep"/><category term="Learning"/><category term="Frameworks"/><summary type="html"><![CDATA[Understanding JAX and Flax!]]></summary></entry><entry><title type="html">Prompt Learning with Optimal Transport Presentation Slides</title><link href="ravialdy/ravialdy.github.io/blog/2023/plot-paper-review/" rel="alternate" type="text/html" title="Prompt Learning with Optimal Transport Presentation Slides"/><published>2023-07-31T12:57:00+00:00</published><updated>2023-07-31T12:57:00+00:00</updated><id>ravialdy/ravialdy.github.io/blog/2023/plot-paper-review</id><content type="html" xml:base="ravialdy/ravialdy.github.io/blog/2023/plot-paper-review/"><![CDATA[<p>Here is the presentation slides when I did paper review about Prompt Learning with Optimal Transport paper.</p> <p><a href="/assets/pdf/(Ravialdy) Review about Prompt Learning with Optimal Transport.pdf">Download Slides</a></p>]]></content><author><name></name></author><category term="slides"/><category term="prompt"/><category term="learning,"/><category term="optimal"/><category term="transport"/><summary type="html"><![CDATA[Here is the presentation slides that I have created when explaining about Prompt Learning with Optimal Transport paper.]]></summary></entry><entry><title type="html">Visual Prompting For Adversarial Robustness Presentation Slides</title><link href="ravialdy/ravialdy.github.io/blog/2023/cavp-paper-review/" rel="alternate" type="text/html" title="Visual Prompting For Adversarial Robustness Presentation Slides"/><published>2023-07-29T12:57:00+00:00</published><updated>2023-07-29T12:57:00+00:00</updated><id>ravialdy/ravialdy.github.io/blog/2023/cavp-paper-review</id><content type="html" xml:base="ravialdy/ravialdy.github.io/blog/2023/cavp-paper-review/"><![CDATA[<p>Here is the presentation slides when I did paper review about Visual Prompting For Adversarial Robustness paper.</p> <p><a href="/assets/pdf/(Ravialdy) Paper Review of Visual Prompting For Adversarial Robustness.pdf">Download Slides</a></p>]]></content><author><name></name></author><category term="slides"/><category term="black-box"/><category term="model,"/><category term="visual"/><category term="prompting,"/><category term="adversarial"/><category term="attack"/><summary type="html"><![CDATA[Here is the presentation slides that I have created when explaining about Visual Prompting For Adversarial Robustness paper.]]></summary></entry><entry><title type="html">Reinforcement Learning from Human Feedback (RLHF) Presentation Slides</title><link href="ravialdy/ravialdy.github.io/blog/2023/rlhf-review/" rel="alternate" type="text/html" title="Reinforcement Learning from Human Feedback (RLHF) Presentation Slides"/><published>2023-07-28T12:57:00+00:00</published><updated>2023-07-28T12:57:00+00:00</updated><id>ravialdy/ravialdy.github.io/blog/2023/rlhf-review</id><content type="html" xml:base="ravialdy/ravialdy.github.io/blog/2023/rlhf-review/"><![CDATA[<p>Here is the presentation slides when I learn about Reinforcement Learning from Human Feedback (RLHF) used in GPT models.</p> <p><a href="/assets/pdf/(Ravialdy) Reinforcement Learning From Human Feedback.pdf">Download Slides</a></p>]]></content><author><name></name></author><category term="slides"/><category term="Reinforcement"/><category term="Learning"/><category term="(RL),"/><category term="RLHF,"/><category term="Natural"/><category term="Language"/><category term="Processing"/><category term="(NLP)"/><summary type="html"><![CDATA[Here is the presentation slides that I have created when explaining about Reinforcement Learning from Human Feedback (RLHF).]]></summary></entry><entry><title type="html">Black-Box Visual Prompting for Robust Transfer Learning Presentation Slides</title><link href="ravialdy/ravialdy.github.io/blog/2023/blackvip-paper-review/" rel="alternate" type="text/html" title="Black-Box Visual Prompting for Robust Transfer Learning Presentation Slides"/><published>2023-07-27T12:57:00+00:00</published><updated>2023-07-27T12:57:00+00:00</updated><id>ravialdy/ravialdy.github.io/blog/2023/blackvip-paper-review</id><content type="html" xml:base="ravialdy/ravialdy.github.io/blog/2023/blackvip-paper-review/"><![CDATA[<p>Here is the presentation slides when I did paper review about Black-Box Visual Prompting for Robust Transfer Learning (BlackVIP) paper.</p> <p><a href="/assets/pdf/(Ravialdy) Paper Review about BlackVIP_Black-Box Visual Prompting for Robust Transfer Learning.pdf">Download Slides</a></p>]]></content><author><name></name></author><category term="slides"/><category term="black-box"/><category term="model,"/><category term="visual"/><category term="prompting"/><summary type="html"><![CDATA[Here is the presentation slides that I have created when explaining about Black-Box Visual Prompting for Robust Transfer Learning paper.]]></summary></entry><entry><title type="html">Black-box Adversarial Reprogramming Presentation Slides</title><link href="ravialdy/ravialdy.github.io/blog/2023/bar-paper-review/" rel="alternate" type="text/html" title="Black-box Adversarial Reprogramming Presentation Slides"/><published>2023-07-26T12:57:00+00:00</published><updated>2023-07-26T12:57:00+00:00</updated><id>ravialdy/ravialdy.github.io/blog/2023/bar-paper-review</id><content type="html" xml:base="ravialdy/ravialdy.github.io/blog/2023/bar-paper-review/"><![CDATA[<p>Here is the presentation slides when I did paper review about Black-box Adversarial Reprogramming (BAR) paper.</p> <p><a href="/assets/pdf/(Ravialdy) Paper Review about Black-box Adversarial Reprogramming.pdf">Download Slides</a></p>]]></content><author><name></name></author><category term="slides"/><category term="adversarial,"/><category term="attack,"/><category term="black-box"/><category term="model"/><summary type="html"><![CDATA[Here is the presentation slides that I have created when explaining about Black-box Adversarial Reprogramming paper.]]></summary></entry><entry><title type="html">Visual ChatGPT Presentation Slides</title><link href="ravialdy/ravialdy.github.io/blog/2023/jupyter-notebook/" rel="alternate" type="text/html" title="Visual ChatGPT Presentation Slides"/><published>2023-07-25T12:57:00+00:00</published><updated>2023-07-25T12:57:00+00:00</updated><id>ravialdy/ravialdy.github.io/blog/2023/jupyter-notebook</id><content type="html" xml:base="ravialdy/ravialdy.github.io/blog/2023/jupyter-notebook/"><![CDATA[<p>Here is the presentation slides that I have created when explaining about Visual ChatGPT paper.</p> <p><a href="/assets/pdf/Paper Review _Visual ChatGPT.pdf">Download Slides</a></p>]]></content><author><name></name></author><category term="slides"/><category term="ChatGPT,"/><category term="GPT-4,"/><category term="Large"/><category term="Language"/><category term="Model"/><category term="(LLM)"/><summary type="html"><![CDATA[Here is the presentation slides that I have created when explaining about Visual ChatGPT paper.]]></summary></entry></feed>